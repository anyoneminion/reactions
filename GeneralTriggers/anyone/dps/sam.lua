local tbl = 
{
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "AnyoneCore = {\n    enabled = true,\n    visible = true,\n    open = false,\n    WindowStyle = {\n    [\"Text\"] = { [1] = 0, [2] = 0, [3] = 0, [4] = 0 },\n    [\"WindowBg\"] = { [1] = 0, [2] = 0, [3] = 0, [4] = 0.85 },\n    [\"Button\"] = { [1] = 20, [2] = 75, [3] = 100, [4] = 1 },\n    [\"ButtonHovered\"] = { [1] = 15, [2] = 31, [3] = 90, [4] = 0.75 },\n    [\"CheckMark\"] = { [1] = 250, [2] = 250, [3] = 250, [4] = 1 },\n    [\"TextSelectedBg\"] = { [1] = 0, [2] = 0, [3] = 0, [4] = 0 },\n    [\"TooltipBg\"] = { [1] = 7, [2] = 0, [3] = 12, [4] = 0.9 },\n    [\"ModalWindowDarkening\"] = { [1] = 7, [2] = 0, [3] = 12, [4] = 0.75 },\n    },\n    version = 3.431,\n    previousVersion,\n    helperVersion = 1.0,\n    news = GetString(\"Check the sidebar on the left for links to my Discord.\"),\n    Data = {\n        selected = 1,\n        Timeout = 0,\n    },\n}\nFaceAway = {\n    enabled = true,\n    visible = true,\n    open = false,\n    WindowStyle = {\n        [\"Text\"] = { [1] = 0, [2] = 0, [3] = 0, [4] = 0 },\n        [\"WindowBg\"] = { [1] = 0, [2] = 0, [3] = 0, [4] = 0 },\n    },\n    FaceAway = false,\n    FaceAwayKey = false,\n    keybindstatus = false,\n    Data = {\n        sleep = 0,\n    },\n}\nAnyoneCore.Settings = {\n    previouslyOpen = false,\n    Keybind = 0x11, -- ctrl is default\n    UseKeybind = false,\n    FaceAwayEnabler = false,\n    DrawFaceAway = true,\n    DrawFaceAwayNoReactions = false,\n    UseFaceAwayReactions = true,\n    WarnForUpdate = false,\n    AutomaticUpdater = false,\n    AlwaysMini = true,\n    CheckJob = true,\n    DrawOrbs = true,\n    DrawDragonHeads = true,\n    DrawBlackWhiteOrbs = true,\t\t\n    DrawChainLightning = true,\n    DrawOccludedFrontOrbs = true,\n    DrawClouds = true,\n    DrawNaelQuotes = true,\n    DrawYaten = true,\n    KnockbackMirrorUptime = true,\n    InterruptSecondAdd = false,\n    LeftSide = true,\n    DisableAssist = false,\n    AddsPhasePot = true,\n    AutoSetSpeedHacks = false,\n    AutoSetMaxCameraZoom = false,\n    UseSprint = false,\n    Neverenpi = false,\n    NeverDash = false,\n    AttackingGaruda = true,\n    UseMoogleTTS = false,\n    UnderstandDanger = false,\n    AntiGhosting = true,\n    PrepullHelper = {},\n    NorthStratMitigation = true,\n    DiamondFrostUptime = false,\n    DutyHelper = {enabled = false, requirebotenabled = true},\n    CameraZoomValue = 35,\n    BadTeamDelay = 200,\n    MiniReactionsTimer = false,\n    DebugLevel = 1,\n    UseCleanse = true,\n    UseCleanseTop = false,\n    SaferKnockback = false,\n    NewTargetMethod = true,\n    PotionOverride = false,\n    SongEntityCount = false,\n    HideUnrelatedJobs = true,\n    TargetDolls = true,\n    ForceApexDolls = false,\n    SafeDashing = true,\n    DontDisableStandardDolls = false,\n    CheckFood = true,\n    CheckFoodDuration = true,\n    CheckFoodDurationValue = 15,\n    AutoPartner = true,\n    PrimalRouletteMitigation = 2,\n    UseDotsToFinishDolls = false,\n    e5sDisableTranspose = true,\n    EnablePlanner = false,\n    AccurateCountdownTimer = false,\n    SimpleCountdown = false,\n    Shotcaller = true,\n    ShotcallerSize = 2,\n    ShotcallerLockPlacement = true,\n    ShotcallerColor = {\n\t\tnormal = {\n\t\t\tr = 0,\n\t\t\tg = 1,\n\t\t\tb = 0,\n\t\t\ta = 1\n\t\t},\n\t\timportant = {\n\t\t\tr = 1,\n\t\t\tg = 0,\n\t\t\tb = 0,\n\t\t\ta = 1\n\t\t},\n\t},\n    QueenGauge = {\n        { name = \"other\", id = nil, gauge = 50 },\n        { name = \"e5s\", id = 906, gauge = 50 },\n        { name = \"e6s\", id = 907, gauge = 50 },\n        { name = \"e7s\", id = 908, gauge = 50 },\n        { name = \"e8s\", id = 909, gauge = 50 },\n        { name = \"ucob\", id = 733, gauge = 50 },\n        { name = \"uwu\", id = 777, gauge = 50 },\n        { name = \"tea\", id = 887, gauge = 50 },\n        { name = \"wolex\", id = 887, gauge = 50 },\n        { name = \"unreal\", id = 887, gauge = 50 },\n    },\n    timelineTable = {\n        [19] = { -- paladin\n            [906] = \"anyone\\\\tank\\\\pld\\\\e5s\", --edens verse\n            [907] = \"anyone\\\\tank\\\\pld\\\\e6s\",\n            [908] = \"anyone\\\\tank\\\\pld\\\\e7s\",\n            [909] = \"anyone\\\\tank\\\\pld\\\\e8s\",\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [20] = {\n            [906] = nil, --edens verse\n            [907] = nil,\n            [908] = nil,\n            [909] = nil,\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [21] = { -- warrior\n            [906] = \"anyone\\\\tank\\\\war\\\\e5s\", --edens verse\n            [907] = \"anyone\\\\tank\\\\war\\\\e6s\",\t\t\t\t\n            [908] = \"anyone\\\\tank\\\\war\\\\e7s\",\n            [909] = \"anyone\\\\tank\\\\war\\\\e8s\",\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [22] = { -- dragoon\n            [906] = \"anyone\\\\dps\\\\drg\\\\e5s\", --edens verse\n            [907] = \"anyone\\\\dps\\\\drg\\\\e6s\",\n            [908] = \"anyone\\\\dps\\\\drg\\\\e7s\",\n            [909] = \"anyone\\\\dps\\\\drg\\\\e8s\",\n            [733] = \"anyone\\\\dps\\\\drg\\\\ucob\", -- ucob\n            [777] = \"anyone\\\\dps\\\\drg\\\\uwu\", -- uwu\n            [887] = \"anyone\\\\dps\\\\drg\\\\TEA beta\", -- tea\n        },\n        [23] = { -- bard\n            [906] = \"anyone\\\\dps\\\\brd\\\\e5s\", --edens verse\n            [907] = \"anyone\\\\dps\\\\brd\\\\e6s\",\n            [908] = \"anyone\\\\dps\\\\brd\\\\e7s\",\n            [909] = \"anyone\\\\dps\\\\brd\\\\e8s\",\n            [733] = \"anyone\\\\dps\\\\brd\\\\ucob\", -- ucob\n            [777] = \"anyone\\\\dps\\\\brd\\\\uwu\", -- uwu\n            [887] = \"rikudou\\\\brd\\\\riku tea\", -- tea\n        },\n        [24] = {\n            [906] = nil, --edens verse\n            [907] = nil,\n            [908] = nil,\n            [909] = nil,\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [25] = { -- black mage\n            [906] = \"mattyice&anyone\\\\dps\\\\blm\\\\e5s\", --edens verse\n            [907] = \"mattyice&anyone\\\\dps\\\\blm\\\\e6s\",\n            [908] = \"mattyice&anyone\\\\dps\\\\blm\\\\e7s\",\n            [909] = \"mattyice&anyone\\\\dps\\\\blm\\\\e8s\",\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [26] = {\n            [906] = nil, --edens verse\n            [907] = nil,\n            [908] = nil,\n            [909] = nil,\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [27] = { -- summoner\n            [906] = \"anyone\\\\dps\\\\smn\\\\e5s\", --edens verse\n            [907] = \"anyone\\\\dps\\\\smn\\\\e6s\",\n            [908] = \"anyone\\\\dps\\\\smn\\\\e7s\",\n            [909] = \"anyone\\\\dps\\\\smn\\\\e8s\",\n            [733] = \"anyone\\\\dps\\\\smn\\\\ucob\", -- ucob\n            [777] = nil, -- uwu\n            [887] = \"anyone\\\\dps\\\\smn\\\\tea BETA\", -- tea\n        },\n        [28] = {\n            [906] = nil, --edens verse\n            [907] = nil,\n            [908] = nil,\n            [909] = nil,\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [29] = {\n            [906] = nil, --edens verse\n            [907] = nil,\n            [908] = nil,\n            [909] = nil,\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [30] = { -- ninja\n            [906] = \"anyone\\\\dps\\\\nin\\\\e5s\", --edens verse\n            [907] = \"anyone\\\\dps\\\\nin\\\\e6s\",\n            [908] = \"anyone\\\\dps\\\\nin\\\\e7s\",\n            [909] = \"anyone\\\\dps\\\\nin\\\\e8s\",\n            [733] = \"anyone\\\\dps\\\\nin\\\\ucob\", -- ucob\n            [777] = \"anyone\\\\dps\\\\nin\\\\uwu\", -- uwu\n            [887] = \"anyone\\\\dps\\\\nin\\\\TEA\", -- tea\n        },\n        [31] = { -- machinist\n            [906] = \"anyone\\\\dps\\\\mch\\\\e5s\", -- edens verse\n            [907] = \"anyone\\\\dps\\\\mch\\\\e6s\",\n            [908] = \"anyone\\\\dps\\\\mch\\\\e7s\",\n            [909] = \"anyone\\\\dps\\\\mch\\\\e8s\",\n            [733] = \"anyone\\\\dps\\\\mch\\\\ucob\", -- ucob\n            [777] = \"anyone\\\\dps\\\\mch\\\\uwu beta\", -- uwu\n            [887] = \"rikudou\\\\mch\\\\riku tea\", -- tea\n        },\n        [32] = { -- dark knight\n            [906] = \"anyone\\\\tank\\\\drk\\\\e5s\", --edens verse\n            [907] = \"anyone\\\\tank\\\\drk\\\\e6s\",\n            [908] = \"anyone\\\\tank\\\\drk\\\\e7s\",\n            [909] = \"anyone\\\\tank\\\\drk\\\\e8s\",\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [33] = {\n            [906] = nil, --edens verse\n            [907] = nil,\n            [908] = nil,\n            [909] = nil,\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [34] = { -- samurai\n            [906] = \"anyone\\\\dps\\\\sam\\\\e5s\", --edens verse\n            [907] = \"anyone\\\\dps\\\\sam\\\\e6s\",\n            [908] = \"anyone\\\\dps\\\\sam\\\\e7s\",\t\n            [909] = \"anyone\\\\dps\\\\sam\\\\e8s\",\n            [733] = nil, -- ucob\n            [777] = \"anyone\\\\dps\\\\sam\\\\uwu\", -- uwu\n            [887] = \"anyone\\\\dps\\\\sam\\\\TEA beta\", -- tea\n        },\n        [35] = { -- red mage\n            [906] = \"mattyice&anyone\\\\dps\\\\rdm\\\\e5s\", --edens verse\n            [907] = \"mattyice&anyone\\\\dps\\\\rdm\\\\e6s\",\n            [908] = \"mattyice&anyone\\\\dps\\\\rdm\\\\e7s\",\n            [909] = \"mattyice&anyone\\\\dps\\\\rdm\\\\e8s\",\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [36] = {\n            [906] = nil, --edens verse\n            [907] = nil,\n            [908] = nil,\n            [909] = nil,\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [37] = { -- gunbreaker\n            [906] = \"anyone\\\\tank\\\\gnb\\\\e5s\", --edens verse\n            [907] = \"anyone\\\\tank\\\\gnb\\\\e6s\",\n            [908] = \"anyone\\\\tank\\\\gnb\\\\e7s\",\n            [909] = \"anyone\\\\tank\\\\gnb\\\\e8s\",\n            [733] = nil, -- ucob\n            [777] = nil, -- uwu\n            [887] = nil, -- tea\n        },\n        [38] = { -- dancer\n            [906] = \"anyone\\\\dps\\\\dnc\\\\e5s\", --edens verse\n            [907] = \"anyone\\\\dps\\\\dnc\\\\e6s\",\n            [908] = \"anyone\\\\dps\\\\dnc\\\\e7s\",\n            [909] = \"anyone\\\\dps\\\\dnc\\\\e8s\",\n            [733] = nil, -- ucob\n            [777] = \"anyone\\\\dps\\\\dnc\\\\uwu\", -- uwu\n            [887] = \"anyone\\\\dps\\\\dnc\\\\tea\", -- tea\n        },\n    },\n    generalTable = {\n        [19] = \"anyone\\\\tank\\\\pld\", -- paladin\n        [20] = nil,\n        [21] = \"anyone\\\\tank\\\\war\", -- warrior\n        [22] = \"anyone\\\\dps\\\\drg\", -- dragoon\n        [23] = \"anyone\\\\dps\\\\brd\", -- bard\n        [24] = nil,\n        [25] = \"mattyice&anyone\\\\dps\\\\blm\", -- black mage\n        [26] = nil,\n        [27] = \"anyone\\\\dps\\\\smn\", -- summoner\n        [28] = nil,\n        [29] = nil,\n        [30] = \"anyone\\\\dps\\\\nin\", -- ninja\n        [31] = \"anyone\\\\dps\\\\mch\", --machinist\n        [32] = \"anyone\\\\tank\\\\drk\", -- dark knight\n        [33] = nil,\n        [34] = \"anyone\\\\dps\\\\sam\", -- samurai\n        [35] = \"mattyice&anyone\\\\dps\\\\rdm\", -- red mage\n        [36] = nil,\n        [37] = \"anyone\\\\tank\\\\gnb\", -- gunbreaker\n        [38] = \"anyone\\\\dps\\\\dnc\", -- dancer\n    },\n}\nlocal Data = AnyoneCore.Data\nlocal MinionPath,LuaModsPath = GetStartupPath(),GetLuaModsPath() \nlocal SettingsPath = LuaModsPath .. \"\\\\TensorReactions\\\\AnyoneCore\"\nlocal DutyHelperPath = SettingsPath .. \"\\\\dutyhelper\"\nlocal ModuleSettings = SettingsPath .. \"\\\\settings.lua\"\nlocal AddonIcon = LuaModsPath .. [[TensorReactions\\AnyoneCore\\images\\Icon.png]]\n\nfunction updater(n)\n    if AnyoneCore.previousVersion == AnyoneCore.version then\n        AnyoneCore.log(GetString(\"Something's wrong, disabling auto-updater to avoid update loop. Report this error to the developer.\"))\n        AnyoneCore.Settings.AutomaticUpdater = false\n        AnyoneCore.previousVersion = nil\n        AnyoneCore.save(true)\n        do return end\n    end\n    ---if not Player.InCombat then\n    if Data.UpdateTick == nil then\n        if n == 1 then -- checking for updates\n            io.open(tostring(LuaModsPath)..\"TensorReactions/AnyoneCore/data/version.txt\",\"w\"):close()\n            io.popen([[start /b powershell -Command \"Try { Add-Content ]]..Data.LogFile..[[ -Value 'Checking Github for updates...'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12, [Net.SecurityProtocolType]::Tls11; $json = (Invoke-WebRequest -Uri https://api.github.com/repos/AnyoneMinion/reactions/releases -UseBasicParsing | ConvertFrom-Json); Add-Content ]]..Data.LogFile..[[ -Value 'Newest version found:', $json[0].tag_name; Set-Content -Path ']] ..LuaModsPath.. [[\\TensorReactions\\AnyoneCore\\data\\version.txt' -Value $json[0].tag_name; Add-Content ]]..Data.LogFile..[[ -Value 'Generating changelog.'; Set-Content -Path ']] ..SettingsPath.. [[/data/changelog.txt' -Value $json[0].body, `n, $json[1].body, `n, $json[2].body, `n, $json[3].body, `n, $json[4].body, `n, $json[5].body; Add-Content ]]..Data.LogFile..[[ -Value 'Done, closing powershell process.'; } Catch { $_ | Out-File -Append ]]..Data.LogFile..[[ -Encoding Ascii }; stop-process -Id $PID\"]]):close()\n            Data.TimerType = \"UpdateChecker\"\n            Data.UpdateTick = Now()\n            AnyoneCore.log(GetString(\"Checking for updates... Please wait.\"), 1)\n            AnyoneCore.Data.checkStatus = \"Checking for updates... Please wait.\"\n        elseif n == 2 then\n            io.open(tostring(LuaModsPath)..\"TensorReactions/AnyoneCore/data/status.txt\",\"w\"):close()\n            io.popen([[start /b powershell -Command \"Try { if(!(test-path ']] ..LuaModsPath.. [[\\TensorReactionsBackup')) { Add-Content ]]..Data.LogFile..[[ -Value 'Creating folder TensorReactionsBackup'; New-Item -Path ']] ..LuaModsPath.. [[\\TensorReactionsBackup' -ItemType Directory -Force }; Add-Content ]]..Data.LogFile..[[ -Value 'Creating backup of TensorReactions folder...'; Compress-Archive -Path ']] ..LuaModsPath.. [[TensorReactions\\GeneralTriggers', ']] ..LuaModsPath.. [[TensorReactions\\TimelineTriggers', ']] ..LuaModsPath.. [[TensorReactions\\AnyoneCore' -DestinationPath ]] ..LuaModsPath.. [[\\TensorReactionsBackup\\TensorReactions_$((Get-Date).ToString('MM_dd_HHmm')).zip -Force; Add-Content ]]..Data.LogFile..[[ -Value 'Finding latest release on Github.'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12, [Net.SecurityProtocolType]::Tls11; $tag = (Invoke-WebRequest -Uri https://api.github.com/repos/AnyoneMinion/reactions/releases -UseBasicParsing | ConvertFrom-Json)[0].tag_name; Add-Content ]]..Data.LogFile..[[ -Value 'Latest release is:', $tag, 'Beginning download of latest release'; Invoke-WebRequest https://github.com/AnyoneMinion/reactions/releases/download/$tag/TensorReactions.zip -Out ]] ..LuaModsPath.. [[\\\\TensorReactions\\\\TensorReactions.zip; Add-Content ]]..Data.LogFile..[[ -Value 'Decompressing...'; Expand-Archive ]] ..LuaModsPath.. [[\\TensorReactions\\TensorReactions.zip -DestinationPath ]] ..LuaModsPath.. [[\\TensorReactions\\ -Force; Add-Content ]]..Data.LogFile..[[ -Value 'Removing old zip file'; Remove-Item ]] ..LuaModsPath.. [[\\TensorReactions\\TensorReactions.zip -Force; Start-Sleep -s 1; Set-Content -Path ']] ..LuaModsPath.. [[\\TensorReactions\\AnyoneCore\\data\\status.txt' -Value 'Done'; Add-Content ]]..Data.LogFile..[[ -Value 'Finished updating.'; } Catch { $_ | Out-File ]]..SettingsPath..[[\\data\\output.txt }; stop-process -Id $PID\"]]):close()\n            Data.TimerType = \"UpdateDownloader\"\n            Data.UpdateTick = Now()\n            AnyoneCore.log(GetString(\"Downloading newest update... Please wait.\"), 1)\n            AnyoneCore.Data.checkStatus = \"Updater starting.\"\n        elseif n == 3 then\n            io.open(tostring(LuaModsPath)..\"TensorReactions/AnyoneCore/data/status.txt\",\"w\"):close()\n            io.popen([[start /b powershell -Command \"Try { if(!(test-path ']] ..LuaModsPath.. [[\\TensorReactionsBackup')) { New-Item -Path ']] ..LuaModsPath.. [[\\TensorReactionsBackup' -ItemType Directory -Force }; Compress-Archive -Path ']] ..LuaModsPath.. [[TensorReactions\\GeneralTriggers', ']] ..LuaModsPath.. [[TensorReactions\\TimelineTriggers', ']] ..LuaModsPath.. [[TensorReactions\\AnyoneCore' -DestinationPath ]] ..LuaModsPath.. [[\\TensorReactionsBackup\\TensorReactions_$((Get-Date).ToString('MM_dd_HHmm')).zip -Force; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12, [Net.SecurityProtocolType]::Tls11; $tag = (Invoke-WebRequest -Uri https://api.github.com/repos/Q-W-E-R-T/Healer-reactions/releases -UseBasicParsing | ConvertFrom-Json)[0].tag_name; Invoke-WebRequest https://github.com/Q-W-E-R-T/Healer-reactions/releases/download/$tag/TensorReactions.zip -Out ]] ..LuaModsPath.. [[\\\\TensorReactions\\\\TensorReactions.zip; Expand-Archive ]] ..LuaModsPath.. [[\\TensorReactions\\TensorReactions.zip -DestinationPath ]] ..LuaModsPath.. [[ -Force; Remove-Item ]] ..LuaModsPath.. [[\\TensorReactions\\TensorReactions.zip -Force; Start-Sleep -s 1; Set-Content -Path ']] ..LuaModsPath.. [[\\TensorReactions\\AnyoneCore\\data\\status.txt' -Value 'Done'; } Catch { $_ | Out-File ]]..SettingsPath..[[\\data\\output.txt }; stop-process -Id $PID\"]]):close()\n            Data.TimerType = \"UpdateDownloader\"\n            Data.UpdateTick = Now()\n            AnyoneCore.log(GetString(\"Downloading newest update... Please wait.\"), 1)\n            AnyoneCore.Data.checkStatus = \"Updater starting.\"\n        end\n    else\n        Data.checkStatus = \"There's already another process going on, please wait for it to end.\"\n        AnyoneCore.log(GetString(\"Please wait for the current process to end before you start another...\"), 1)\n    end\n    ---else\n        ---AnyoneCore.log(\"Updater: Player is in combat. Please exit combat to update AnyoneCore.\", 2)\n    ---end\nend\n\nfunction AnyoneCoreReload()\n    if AnyoneCore.open == true then AnyoneCore.Settings.previouslyOpen = true AnyoneCore.save(true) else AnyoneCore.Settings.previouslyOpen = false AnyoneCore.save(true) end\n    AnyoneCore.log(GetString(\"Reloading AnyoneCore...\"), 2)\n    table.clear(Data)\n    table.clear(FaceAway.Data)\n    gAnyoneCoreInitialize = false\n    TensorCore.API.TensorReactions.reloadGeneralTriggers()\n    TensorCore.API.TensorReactions.reloadTimelineTriggers()\nend\n\nfunction WarnForUpdate()\n    if Data.gitVersion ~= nil and (AnyoneCore.version < Data.gitVersion) and AnyoneCore.Settings.WarnForUpdate == true then\n        if AnyoneCore.Settings.AutomaticUpdater == false then\n            TensorCore.sendParsedChatMessage(\"/e {color:255, 255, 0}[AnyoneCore] {color:0, 255, 0}A new update to Anyone's reactions is available to download. Open AnyoneCore in your FFXIVMinion menu to update.\")\n            AnyoneCore.log(GetString(\"New update available!\"), 1)\n        elseif AnyoneCore.Settings.AutomaticUpdater == true then\n            TensorCore.sendParsedChatMessage(\"/e {color:255, 255, 0}[AnyoneCore] {color:0, 255, 0}A new update to Anyone's Reactions was found. Starting update...\")\n            AnyoneCore.log(GetString(\"New update available, automatically starting download.\"), 1)\n            updater(2)\n        end\n    else\n        AnyoneCore.log(\"No updates available.\", 2)\n    end\t\nend\n\nfunction JobCheck(n)\n    if n == nil or n == 1 then\n        local CurrentTimeline = TensorCore.API.TensorReactions.getTimelineTriggerProfileName()\n        local CurrentGeneral = TensorCore.API.TensorReactions.getGeneralTriggerProfileName()\n        if AnyoneCore.Settings.CheckJob == true then\n            if (AnyoneCore.Settings.timelineTable[Player.job][Player.localmapid] ~= nil) and (CurrentTimeline ~= AnyoneCore.Settings.timelineTable[Player.job][Player.localmapid]) then\n                TensorCore.sendParsedChatMessage(\"/e {color:0, 255, 0}[AnyoneCore] {color:255, 200, 0}Incorrect timeline profile selected for current job. Note: This might be thrown off by slow loading.\")\n                TensorCore.sendParsedChatMessage(\"/e {color:0, 255, 0}[AnyoneCore] {color:255, 200, 0}Current profile: '\"..tostring(CurrentTimeline)..\"'\")\n                TensorCore.sendParsedChatMessage(\"/e {color:0, 255, 0}[AnyoneCore] {color:255, 200, 0}Correct profile: '\"..tostring(AnyoneCore.Settings.timelineTable[Player.job][Player.localmapid])..\"'.\")\n                AnyoneCore.log(GetString(\"Job check failed. Sending chat warning.\"), 2)\n                AnyoneCore.Shotcall(GetString(\"You're on the wrong timeline reactions.\"), true, 5)\n            end\n            if AnyoneCore.Settings.generalTable[Player.job] ~= nil and (CurrentGeneral ~= AnyoneCore.Settings.generalTable[Player.job]) then\n                TensorCore.sendParsedChatMessage(\"/e {color:0, 255, 0}[AnyoneCore] {color:255, 200, 0}Incorrect general trigger profile selected for current job.\") \n                TensorCore.sendParsedChatMessage(\"/e {color:0, 255, 0}[AnyoneCore] {color:255, 200, 0}Current profile: '\"..tostring(CurrentGeneral)..\"'\")\n                TensorCore.sendParsedChatMessage(\"/e {color:0, 255, 0}[AnyoneCore] {color:255, 200, 0}Correct profile: '\"..tostring(AnyoneCore.Settings.generalTable[Player.job])..\"'.\")\n                AnyoneCore.log(GetString(\"Job check failed. Sending chat warning.\"), 2)\n                AnyoneCore.Shotcall(GetString(\"You're on the wrong general reactions.\"), true, 5)\n            end\n        end\n    elseif n == nil or n == 2 then\n        if Player.job == 31 then\n            for i=1,#AnyoneCore.Settings.QueenGauge do\n                if Player.localmapid == AnyoneCore.Settings.QueenGauge[i].id then\n                    ACR_TensorMagnum_SummonQueen_Gauge = AnyoneCore.Settings.QueenGauge[i].gauge\n                    AnyoneCore.log(GetString(\"Set Magnum's queen gauge usage to \")..AnyoneCore.Settings.QueenGauge[i].gauge, 2)\n                else\n                    ACR_TensorMagnum_SummonQueen_Gauge = AnyoneCore.Settings.QueenGauge[1].gauge\n                end\n            end\n        end\n    elseif n ~= nil and n == 3 then\n        if AnyoneCore.Settings.CheckFood == true then\n            local tbl = {}\n            for _,buff in pairs(Player.buffs) do\n                if buff.id == 48 then\n                    table.insert(tbl,buff)\n                end\n            end\n            if table.size(tbl) > 0 then\n                if AnyoneCore.Settings.CheckFoodDuration == true and tbl[1].duration < (AnyoneCore.Settings.CheckFoodDurationValue * 60) then\n                    TensorCore.sendParsedChatMessage(\"/e {color:0, 255, 0}[AnyoneCore] {color:255, 0, 0}Warning: {color:255, 200, 0}Food buff is running low. <se.4>\")\n                    AnyoneCore.log(GetString(\"Player's food is running low. Sending chat warning.\"), 2)\n                    AnyoneCore.Shotcall((math.round(tbl[1].duration / 60))..\" minutes remaining on food buff.\", true)\n                end\n            else\n                TensorCore.sendParsedChatMessage(\"/e {color:0, 255, 0}[AnyoneCore] {color:255, 0, 0}Warning: {color:255, 200, 0}Player does not currently have any food. <se.3>\")\n                AnyoneCore.log(GetString(\"Player does not have any food. Sending chat warning.\"), 2)\n                AnyoneCore.Shotcall(GetString(\"Missing food buff\"), true)\n            end\n        end\n    end\nend\n\nlocal PreviousSave,lastcheck = {},0\nfunction AnyoneCore.save(force)\n    if FolderExists(SettingsPath) then\n        if (force or TimeSince(lastcheck) > 30000) then\n            lastcheck = Now()\n            if not table.deepcompare(AnyoneCore.Settings,PreviousSave) then\n                AnyoneCore.log(GetString(\"Settings have been saved.\"), 2)\n                FileSave(ModuleSettings,AnyoneCore.Settings)\n                PreviousSave = table.deepcopy(AnyoneCore.Settings)\n            end\n        end\n    else\n        AnyoneCore.log(\"Missing AnyoneCore's folder from \"..tostring(SettingsPath)..\", settings will not be saved.\", 3)\n    end\nend\n\nlocal v = table.valid\nfunction valid(...)\n    local tbl = {...}\n    local size = #tbl\n    if size > 0 then\n        local count = tbl[1]\n        if type(count) == \"number\" then\n            if size == (count + 1) then\n                for i = 2, size do\n                    if not v(tbl[i]) then return false end\n                end\n                return true\n            end\n        else\n            for i = 1, size do\n                if not v(tbl[i]) then return false end\n            end\n            return true\n        end\n    end\n    return false\nend\n\nfunction LoadSettings()\n    if FileExists(ModuleSettings) then\n        local tbl = FileLoad(ModuleSettings)\n        local function scan(tbl,tbl2,depth)\n            depth = depth or 0\n            if valid(2,tbl,tbl2) then\n                for k,v in pairs(tbl2) do\n                    if type(v) == \"table\" then\n                        if tbl[k] and valid(tbl[k]) then\n                            tbl[k] = table.merge(tbl[k],scan(tbl[k],v,depth+1))\n                        else\n                            tbl[k] = v\n                        end\n                    else\n                        if tbl[k] ~= tbl2[k] then tbl[k] = tbl2[k] end\n                    end\n                end\n            end\n            return tbl\n        end\n        AnyoneCore.Settings = scan(AnyoneCore.Settings,tbl)\n        if not AnyoneCore.Data.Loaded then \n            AnyoneCore.Initialize()\n        end\n    else\n        if not AnyoneCore.Data.Loaded then \n            AnyoneCore.Initialize()\n        end\n        AnyoneCore.log(GetString(\"Could not find AnyoneCore's settings. This will happen on first time usage but is an error if not your first time.\"))\n    end\nend\n\nfunction AnyoneCore.log(text, n)\n    if n == 1 or n == nil then\n        d(\"[AnyoneCore v\"..tostring(AnyoneCore.version)..\"] \"..text)\n    elseif n == 2 then\n        if AnyoneCore.Settings.DebugLevel >= 2 then\n            d(\"[AnyoneCore v\"..tostring(AnyoneCore.version)..\"] \"..text)\n        end\n    elseif n == 3 then\n        ml_gui.showconsole = true\n        d(\"[AnyoneCore v\"..tostring(AnyoneCore.version)..\"] CRITICAL ERROR\")\n        d(\"[AnyoneCore v\"..tostring(AnyoneCore.version)..\"] \"..text)\n    elseif n == 4 then\n        if Data.str ~= text and AnyoneCore.Settings.DebugLevel > 2 then\n            d(\"[AnyoneCore v\"..tostring(AnyoneCore.version)..\"] \"..text)\n            Data.str = text\n        end\n    end\n    if AnyoneCore.Settings.DebugLevel == 3 then\n        local time = os.date(\"%H:%M:%S\")\n        if n == 3 then\n            Data.towrite = \"[\" .. time .. \"] CRITICAL ERROR: \" .. text .. \"\\n\"\n        else\n            Data.towrite = \"[\" .. time .. \"] \" .. text .. \"\\n\"\n        end\n        FileWrite(Data.LogFile, Data.towrite, true)\n    end\nend\n\nfunction AnyoneCore.conditionCheck(info)\n    if FFXIV_Common_BotRunning == true then\n        if info ~= nil then AnyoneCore.log(\"Executed reaction: \"..info.name, 2) end\n        return true\n    else\n        if info ~= nil then AnyoneCore.log(\"Will not execute: \"..info.name..\", assist is disabled.\", 2) end\n        return false\n    end\nend\n\nfunction AnyoneCore.Shotcall(text, tts, timer, important)\n    if text ~= nil then\n        AnyoneCore.Data.ShotcallText = text\n        AnyoneCore.log(GetString(\"Sending to shotcaller GUI: \")..text, 1)\n    else\n        AnyoneCore.log(\"Proper usage is AnyoneCore.Shotcall('text goes here', true/false, 10, true/false'). Syntax: AnyoneCore.Shotcall(text, tts, timer, beep)\", 2)\n    end\n    if timer ~= nil then\n        AnyoneCore.Data.ShotcallTimer = timer\n        AnyoneCore.Data.ShotcallTimerStart = Now()\n    else\n        AnyoneCore.Data.ShotcallTimer = 5\n        AnyoneCore.Data.ShotcallTimerStart = Now()\n    end\n    if tts == true and MoogleTTS ~= nil then\n        MoogleTTS.Speak(text)\n        AnyoneCore.log(GetString(\"Sending to MoogleTTS\"))\n    end\n    if important == true then\n        AnyoneCore.Data.ShotcallImportant = true\n    else\n        AnyoneCore.Data.ShotcallImportant = false\n    end\nend\n\nfunction AnyoneCore.debug()\n    local str = \"\" \n    for k, v in pairs(_G) do if string.find(k, \"ACR_\", 1, true) then str = str .. k .. \" = \" .. tostring(v) .. \"\\n\" end end\n    local addons = {}\n    local AddonFolder = FolderList(LuaModsPath, nil, true)\n    for i=1,#AddonFolder do\n        table.insert(addons, (AddonFolder[i]))\n    end\n    local date = os.date(\"%Y%m%d_%H-%M-%S\")\n    local message = \"AnyoneCore version: \" .. tostring(AnyoneCore.version) .. \"\\n\" .. tostring(AnyoneCore.Settings) .. \"\\n\" .. tostring(AnyoneCore.Data) .. \"\\n\\n\\nCurrently loaded general triggers: \" .. tostring(TensorCore.API.TensorReactions.getGeneralTriggerProfileName()) .. \"\\nCurrently loaded timeline triggers: \" .. tostring(TensorCore.API.TensorReactions.getTimelineTriggerProfileName()) .. \"\\n\\n\\nACR Settings: \\n\" .. str .. \"\\n\\n Addons: \" .. tostring(addons) .. \"\\n\\n\"\n    local logs = SettingsPath..\"\\\\logs\\\\Debugging_\"..date..\".txt\"\n    FileWrite(logs, message, true)\n    io.popen([[start /b powershell -Command \"$version = ' PowerShell Version: ' + $PSVersionTable.PSVersion.Major + '.' + $PSVersionTable.PSVersion.Minor; Add-Content ]]..logs..[[ -Value $version; stop-process -Id $PID\"]]):close()\n    AnyoneCore.log(GetString(\"Debug log created at \") ..tostring(logs), 1)\nend\n\n--- Taken from Rikudou's function in Moogle Telegraphs for determining if player is inside an AOE. Used for safe dashing/jumping.\nfunction AnyoneCore.avoidanceCallback(aoe)\n    if aoe == nil then return false end\n    local ent = EntityList:Get(aoe.entityID)\n    if ent then\n        return not TensorCore.isFriendly(ent)\n    end\nend\n\nfunction AnyoneCore.ValidInput()\n    if AnyoneCore.Settings.QueenGauge[AnyoneCore.Data.selected].gauge > 100 then\n        AnyoneCore.Settings.QueenGauge[AnyoneCore.Data.selected].gauge = 100\n        AnyoneCore.save(true)\n    elseif AnyoneCore.Settings.QueenGauge[AnyoneCore.Data.selected].gauge < 50 then\n        AnyoneCore.Settings.QueenGauge[AnyoneCore.Data.selected].gauge = 50\n        AnyoneCore.save(true)\n    else\n        AnyoneCore.save(true)\n    end\n    \n    if AnyoneCore.Settings.CameraZoomValue > 100 then\n        AnyoneCore.Settings.CameraZoomValue = 100\n        AnyoneCore.save(true)\n        if AnyoneCore.Settings.AutoSetMaxCameraZoom == true then\n            gDevHackMaxZoom = AnyoneCore.Settings.CameraZoomValue\n            Hacks:SetCamMaxZoom(gDevHackMinZoom,gDevHackMaxZoom)\n        end\n    elseif AnyoneCore.Settings.CameraZoomValue < 20 then\n        AnyoneCore.Settings.CameraZoomValue = 20\n        AnyoneCore.save(true)\n        if AnyoneCore.Settings.AutoSetMaxCameraZoom == true then\n            gDevHackMaxZoom = AnyoneCore.Settings.CameraZoomValue\n            Hacks:SetCamMaxZoom(gDevHackMinZoom,gDevHackMaxZoom)\n        end\n    else\n        AnyoneCore.save(true)\n        if AnyoneCore.Settings.AutoSetMaxCameraZoom == true then\n            gDevHackMaxZoom = AnyoneCore.Settings.CameraZoomValue\n            Hacks:SetCamMaxZoom(gDevHackMinZoom,gDevHackMaxZoom)\n        end\n    end\n    \n    if AnyoneCore.Settings.BadTeamDelay > 1500 then\n        AnyoneCore.Settings.BadTeamDelay = 1500\n        AnyoneCore.save(true)\n    elseif AnyoneCore.Settings.BadTeamDelay < 0 then\n        AnyoneCore.Settings.BadTeamDelay = 0\n        AnyoneCore.save(true)\n    else\n        AnyoneCore.save(true)\n    end\n\n    if AnyoneCore.Settings.CheckFoodDurationValue > 50 then\n        AnyoneCore.Settings.CheckFoodDurationValue = 50\n        AnyoneCore.save(true)\n    elseif AnyoneCore.Settings.CheckFoodDurationValue < 1 then\n        AnyoneCore.Settings.CheckFoodDurationValue = 1\n        AnyoneCore.save(true)\n    else\n        AnyoneCore.save(true)\n    end\nend\n\nfunction AnyoneCore.Initialize()\n    if not Data.LogFile then\n        local date = os.date(\"%Y%m%d_%H-%M-%S\")\n        Data.LogFile = SettingsPath..\"\\\\logs\\\\\"..date..\".txt\"\n        if AnyoneCore.Settings.DebugLevel == 3 then\n            FileWrite(SettingsPath..\"\\\\logs\\\\\"..date..\".txt\", GetString(\"Please take note: it's completely safe to delete these logs as long as you don't need them, they're only here for people to report errors.\\n\"))\n        end\n    end\n    if AnyoneCore.Settings.AlwaysMini == true then\n        ml_global_information.drawMode = 0\n        if MoogleTTS ~= nil then\n            MoogleTTS.GUI.open = false\n        end\n    end\n    if AnyoneCore.Settings.AutoSetMaxCameraZoom == true then\n        gDevHackMaxZoom = AnyoneCore.Settings.CameraZoomValue\n        Hacks:SetCamMaxZoom(gDevHackMinZoom,gDevHackMaxZoom)\n    end\n    if not FolderExists(SettingsPath) then\n        AnyoneCore.log(GetString(\"Error: Certain functions will not work properly until the 'AnyoneCore' folder from the GitHub is properly placed in \") ..LuaModsPath.. \"\\\\TensorReactions\", 3)\n    end\n    if FolderExists(DutyHelperPath) then\n        AnyoneCore.CasterMitigation = FileLoad(DutyHelperPath..\"\\\\castermitigation.lua\")\n        AnyoneCore.RDPSMitigation = FileLoad(DutyHelperPath..\"\\\\rdpsmitigation.lua\")\n        AnyoneCore.TankMitigation = FileLoad(DutyHelperPath..\"\\\\knockback.lua\")\n        AnyoneCore.MDPSMitigation = FileLoad(DutyHelperPath..\"\\\\mdpsmitigation.lua\")\n        AnyoneCore.MAOEMitigation = FileLoad(DutyHelperPath..\"\\\\cleartarget.lua\")\n        AnyoneCore.AOEMitigation = FileLoad(DutyHelperPath..\"\\\\cleartarget.lua\")\n        AnyoneCore.Reprisal = FileLoad(DutyHelperPath..\"\\\\reprisal.lua\")\n        AnyoneCore.Knockback = FileLoad(DutyHelperPath..\"\\\\knockback.lua\")\n        AnyoneCore.StopCasting = FileLoad(DutyHelperPath..\"\\\\stopcasting.lua\")\n        AnyoneCore.ClearTarget = FileLoad(DutyHelperPath..\"\\\\cleartarget.lua\")\n        AnyoneCore.FaceAwayID = FileLoad(DutyHelperPath..\"\\\\faceaway.lua\")\n    else\n        AnyoneCore.log(GetString(\"Error, Duty Helper files not found. Duty Helper will not function properly until the AnyoneCore folder is properly placed in \") ..LuaModsPath.. \"\\\\TensorReactions\", 3)\n    end\n    if AnyoneCore.Settings.previouslyOpen == true then\n        AnyoneCore.open = true\n        AnyoneCore.Settings.previouslyOpen = false\n        AnyoneCore.save(true)\n    end\n    AnyoneCore.Data.LoadMultiJob = true\n    gAvoidHP = 0\n    gFleeHP = 0\n    gFleeMP = 0\n    gPotionHP = 0\n    gPotionMP = 0\n    gRestHP = 0\n    gRestMP = 0\n    gUseSprint = \"0\"\n    AnyoneCore.Data.Loaded = true\n    AnyoneCore.log(GetString(\"Successfully initialized.\"))\n    AnyoneCore.log(GetString(\"If there are any issues, please report them to Anyone#9549 on Discord.\"))\nend\n\nAnyoneCore.Data.LinksTable = {\n    [1] = {\n        name = \"dummy page doesnt work\",\n        icon = MinionPath .. [[\\GUI\\UI_Textures\\code.png]],\n        link = nil,\n        tooltip = \"first link doesnt work so lol\",\n        lasthover = 0,\n        size = { x = 25, y = 25}\n    },\n    [2] = {\n        name = \"GitHub\",\n        icon = LuaModsPath .. [[\\TensorReactions\\AnyoneCore\\images\\githublogo.png]],\n        link = [[https://github.com/AnyoneMinion/reactions/releases]],\n        tooltip = GetString(\"Releases page of GitHub, if you want to see any changes or download an older release.\\n\\nLeft-click to be sent to my GitHub page.\"),\n        lasthover = 0,\n        size = { x = 25, y = 25}\n    },\n    [3] = {\n        name = \"Ko-fi\",\n        icon = LuaModsPath .. [[\\TensorReactions\\AnyoneCore\\images\\kofi.png]],\n        link = [[https://ko-fi.com/anyoneminion]],\n        tooltip = GetString(\"If you appreciate the work I put into reactions, then throw me a few bucks on my Ko-fi page. This is for one time donations.\\n\\nLeft-click to be sent to my donation page.\"),\n        lasthover = 0,\n        size = { x = 25, y = 25}\n    },\n    [4] = {\n        name = \"Patreon\",\n        icon = LuaModsPath .. [[\\TensorReactions\\AnyoneCore\\images\\patreon.png]],\n        link = [[https://www.patreon.com/anyoneminion]],\n        tooltip = GetString(\"If you appreciate the work I put into reactions, then feel free to subscribe to my patreon page.\\n\\nLeft-click to be sent to my patreon page.\"),\n        lasthover = 0,\n        size = { x = 25, y = 25}\n    },\n    [5] = {\n        name = \"Discord\",\n        icon = LuaModsPath .. [[\\TensorReactions\\AnyoneCore\\images\\discord.png]],\n        link = [[https://discord.gg/bVABzBA]],\n        link2 = [[https://discord.gg/YtvCbcB]],\n        tooltip = GetString(\"Left-click to get sent to Rikudou's discord, which is where all reactions support and questions should go.\\n\\nRight-click to get sent to my personal discord, which is meant mostly for support with Profiler and any other addons I develop. There's a few things here for reactions, but I'd prefer discussion to stay in Rikudou's discord.\"),\n        lasthover = 0,\n        size = { x = 25, y = 25}\n    },\n    [6] = {\n        name = \"Trello\",\n        icon = LuaModsPath .. [[\\TensorReactions\\AnyoneCore\\images\\trello.png]],\n        link = [[https://trello.com/b/YAn04EOz/anyones-minion-development]],\n        tooltip = GetString(\"A link to my Trello page that contains a backlog of updates, stuff I'm working on, stuff I've finished and stuff I've abandoned.\"),\n        lasthover = 0,\n        size = { x = 25, y = 25}\n    },\n    [7] = {\n        name = \"Reload\",\n        icon = MinionPath .. [[\\GUI\\UI_Textures\\change.png]],\n        link1 = nil,\n        link2 = nil,\n        link3 = true,\n        tooltip = GetString(\"Reloads AnyoneCore and loads reactions again.\\n\\nMostly meant for debugging and development purposes.\\n\\nLeft-click to reload AnyoneCore and reactions.\"),\n        lasthover = 0,\n        size = { x = 25, y = 25}\n    },\n}\n\nAnyoneCore.main_tabs = GUI_CreateTabs(\"Updater,Helpers,Reactions,Extra\")\nml_gui.ui_mgr:AddMember({ id = \"FFXIVMINION##MENU_AnyoneCore\", name = \"AnyoneCore\", onClick = function() AnyoneCore.open = not AnyoneCore.open end, texture = AddonIcon, tooltip = \"Menu for changing the settings for Anyone's reactions for TensorReactions.\"},\"FFXIVMINION##MENU_HEADER\")\ngAnyoneCoreInitialize = true\nLoadSettings()\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Initialize",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if AnyoneCore.Data.Timeout < 10 then\n\tif TimeSince(AnyoneCore.Data.UpdateTick) > 2500 then\n\t\tif AnyoneCore.Data.TimerType == \"UpdateChecker\" then\n\t\t\tAnyoneCore.Data.Timeout = AnyoneCore.Data.Timeout + 1\n\t\t\tAnyoneCore.Data.checkStatus = \"Checking for updates, please wait. Attempt #\"..tostring(AnyoneCore.Data.Timeout)\n\t\t\tlocal LuaModsPath = GetLuaModsPath()\n\t\t\tlocal file = io.open(tostring(LuaModsPath)..\"TensorReactions/AnyoneCore/data/version.txt\") \n\t\t\tlocal output\n\t\t\tif file ~= nil then\n\t\t\t\toutput = file:read()\n\t\t\t\tfile:close()\t\t\t\t\n\t\t\telseif file == nil then\n\t\t\t\tAnyoneCore.log(\"Issue opening file \"..tostring(LuaModsPath)..\"TensorReactions/AnyoneCore/data/version.txt\", 3)\n\t\t\tend\n\t\t\tif output ~= nil then\n\t\t\t\tAnyoneCore.Data.gitVersion = tonumber(output)\n\t\t\t\tAnyoneCore.Data.checkStatus = nil\n\t\t\t\tAnyoneCore.Data.UpdateTick = nil\n\t\t\t\tAnyoneCore.Data.TimerType = nil\n\t\t\t\tAnyoneCore.Data.Timeout = 0\n\t\t\t\tAnyoneCore.log(\"Github version number was successfully found. Generating changelog next...\", 2)\n\t\t\t\tWarnForUpdate()\n\t\t\t\tlocal file = io.open(tostring(LuaModsPath)..\"TensorReactions/AnyoneCore/data/changelog.txt\") \n\t\t\t\tif file ~= nil then\n\t\t\t\t\toutput = file:read(\"*all\")\n\t\t\t\t\tfile:close()\n\t\t\t\t\tAnyoneCore.Data.changelog = output\n\t\t\t\t\tAnyoneCore.log(\"Successfully generated changelog.\")\n\t\t\t\telse\n\t\t\t\t\tAnyoneCore.log(\"Could not generate changelog.\", 3)\n\t\t\t\tend\n\t\t\telseif output == nil then\n\t\t\t\tAnyoneCore.Data.UpdateTick = Now()\n\t\t\t\tAnyoneCore.log(\"Attempt #\"..AnyoneCore.Data.Timeout..\"/10: Github version data still empty. Checking again.\", 2)\n\t\t\tend\n\t\telseif AnyoneCore.Data.TimerType == \"UpdateDownloader\" then\n\t\t\tAnyoneCore.Data.Timeout = AnyoneCore.Data.Timeout + 1\n\t\t\tAnyoneCore.Data.checkStatus = \"Downloading updates, please wait. Attempt #\"..tostring(AnyoneCore.Data.Timeout)\n\t\t\tlocal LuaModsPath = GetLuaModsPath()\n\t\t\tlocal file = io.open(tostring(LuaModsPath)..\"TensorReactions/AnyoneCore/data/status.txt\") \n\t\t\tlocal output\n\t\t\tif file ~= nil then\n\t\t\t\toutput = file:read()\n\t\t\t\tfile:close()\t\t\t\t\n\t\t\telseif file == nil then\n\t\t\t\tAnyoneCore.Data.UpdateTick = Now()\n\t\t\t\tAnyoneCore.log(\"Issue opening file \"..tostring(LuaModsPath)..\"TensorReactions/AnyoneCore/data/status.txt\", 3)\n\t\t\tend\n\t\t\tif output ~= nil then\n\t\t\t\tAnyoneCore.Data.checkStatus = \"Restarting...\"\n\t\t\t\tAnyoneCore.log(\"Update was downloaded, reloading AnyoneCore.\", 1)\n\t\t\t\tAnyoneCore.previousVersion = AnyoneCore.version\n\t\t\t\tAnyoneCoreReload()\n\t\t\telseif output == nil then\n\t\t\t\tAnyoneCore.Data.UpdateTick = Now()\n\t\t\t\tAnyoneCore.log(\"Attempt #\"..AnyoneCore.Data.Timeout..\"/10: Status data still empty, trying again.\", 2)\n\t\t\tend\n\t\tend\n\tend\nelseif AnyoneCore.Data.Timeout >= 10 then\n\tif AnyoneCore.Data.TimerType == \"UpdateChecker\" then\n\t\tAnyoneCore.Data.checkStatus = \"Checking for updates failed.\"\n\t\tAnyoneCore.log(\"Could not check for updates.\", 3)\n\telseif AnyoneCore.Data.TimerType == \"UpdateDownloader\" then\n\t\tAnyoneCore.Data.checkStatus = \"Downloading newest update failed.\"\n\t\tAnyoneCore.log(\"Could not download newest update.\", 3)\n\tend\n\tAnyoneCore.Data.Timeout = 0\n\tAnyoneCore.Data.UpdateTick = nil\n\tAnyoneCore.Data.TimerType = nil\nend\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Confirm Update Status",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local c = 0\nGUI:SetNextWindowSize(515,445,GUI.SetCond_Appearing)\nlocal winX,winY,posX,posY\nAnyoneCore.visible, AnyoneCore.open = GUI:Begin(\"AnyoneCore - Reaction Settings Menu\", AnyoneCore.open)\nfor k,v in pairs(AnyoneCore.WindowStyle) do if v[4] ~= 0 then c = c + 1 loadstring([[GUI:PushStyleColor(GUI.Col_]]..k..[[, ]]..(v[1]/255)..[[, ]]..(v[2]/255)..[[, ]]..(v[3]/255)..[[, ]]..v[4]..[[)]])() end end\nif AnyoneCore.visible then\n    local tabindex, tabname = GUI_DrawTabs(AnyoneCore.main_tabs) \n    if (tabname == GetString(\"Updater\")) then\n        if AnyoneCore.Data.changelog == nil then\n            GUI:Dummy(145,145) GUI:SameLine(0,0)\n            GUI:Image(ml_global_information.path .. \"\\\\LuaMods\\\\TensorReactions\\\\AnyoneCore\\\\images\\\\Icon.png\", 200, 200)\n        else\n            GUI:BeginChildFrame(1, 495, 225)\n            GUI:TextWrapped(tostring(AnyoneCore.Data.changelog))\n            GUI:EndChildFrame()\n        end\n        GUI:Spacing( )\n        GUI:Separator( )\n        GUI:Spacing( )\n\n        GUI:Bullet()\n        GUI:TextColored(0.5,1,0,1,GetString(\"Latest news: \")..AnyoneCore.news)\n        \n        GUI:Bullet()\n        GUI:TextColored(1,1,0,1,GetString(\"Current AnyoneCore Version: \").. tostring(AnyoneCore.version))\n        if AnyoneCore.Data.gitVersion ~= nil then\n            GUI:Bullet()\n            GUI:TextColored(1,1,0,1,GetString(\"Latest GitHub Release Version: \").. tostring(AnyoneCore.Data.gitVersion))\n            if AnyoneCore.version < AnyoneCore.Data.gitVersion then\n                AnyoneCore.Data.checkStatus = \"New version available!\"\n            end\n        end\n        \n        if AnyoneCore.Data.checkStatus ~= nil then\n        GUI:TextColored(0,1,0,1,AnyoneCore.Data.checkStatus)\n        end\n        \n        if GUI:Button(GetString(\"Check for updates\")) then updater(1) end\n        \n        GUI:SameLine()\n        if GUI:BeginPopupModal(\"Download Updates\", true, GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoScrollWithMouse + GUI.WindowFlags_NoCollapse + GUI.WindowFlags_NoSavedSettings) then\n            GUI:PushTextWrapPos(500)\n            GUI:Text(GetString(\"If you have a personally edited timeline, back it up or change the file name now or it'll be overwritten by the updater.\\n\"))\n            GUI:TextColored(1,1,0,1,GetString(\"A backup of your files will be created in LuaMods/TensorReactionsBackup.\\n\")) \n            GUI:TextColored(1,0,0,1,GetString(\"Warning: if any of the folders leading up to your LuaMods folder has a space in it's name, AnyoneCore updater will not work.\\n\"))\n            if GUI:Button(GetString(\"Yes\")) then updater(2) GUI:CloseCurrentPopup() end \n            GUI:SameLine()\n            if GUI:Button(GetString(\"No\")) then GUI:CloseCurrentPopup() end\n            GUI:PopTextWrapPos()\n            GUI:EndPopup()\n        end\n        if GUI:Button(GetString(\"Update to newest release\")) then GUI:OpenPopup(\"Download Updates\") end\n\n        local hovered = false\n        AnyoneCore.Settings.WarnForUpdate, changed = GUI:Checkbox(GetString(\"Automatically check for new updates\"), AnyoneCore.Settings.WarnForUpdate)\n        if changed then AnyoneCore.save(true) end\n        if not hovered then hovered = GUI:IsItemHovered() end\n        if hovered then\n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(GetString(\"Sends you a client-sided green colored chat message upon starting up if there's a new update available.\\n\"))\n            GUI:TextColored(1,1,0,1,GetString(\"Checks for a new update every 15 minutes.\\n\"))\n            GUI:TextColored(1,0,0,1,GetString(\"Be careful not to include your chat in any screenshots if you have this setting enabled.\\n\"))\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n        end\n        \n        local hovered = false\n        AnyoneCore.Settings.AutomaticUpdater, changed = GUI:Checkbox(GetString(\"Automatically download new updates when available\"), AnyoneCore.Settings.AutomaticUpdater)\n        if changed then AnyoneCore.save(true) end\n        if not hovered then hovered = GUI:IsItemHovered() end\n        if hovered then\n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(GetString(\"If a new update is available, it will be automatically downloaded and applied as soon as it's available. Your current files will be backed up in LuaMods/TensorReactionsBackup.\\n\"))\n            GUI:TextColored(1,1,0,1,GetString(\"A green colored chat message will be sent to chat that a new update has been downloaded.\"))\n            GUI:TextColored(1,0,0,1,GetString(\"If you have personally edited reactions, then you NEED to rename the files. As long as they aren't the same name, they won't be replaced.\\n\"))\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n        end\n    elseif (tabname == GetString(\"Helpers\")) then\n        if (GUI:CollapsingHeader(GetString(\"Prepull Helper\"))) then\n\n            if AnyoneCore.Settings.PrepullHelper == true or AnyoneCore.Settings.PrepullHelper == false then AnyoneCore.Settings.PrepullHelper = {} end\n            if AnyoneCore.Settings.PrepullHelper[Player.job] == nil then \n                table.insert(AnyoneCore.Settings.PrepullHelper, Player.job,{ enabled = true, sprint = true, peloton = true, divineveil = true, backflip = true, placepet = true, aetherpact = true, badteamdelay = 300, doton = false, level70nin = false }) \n                AnyoneCore.save(true)\n            end\n            if Player.job == 30 and (AnyoneCore.Settings.PrepullHelper[Player.job].doton == nil or AnyoneCore.Settings.PrepullHelper[Player.job].level70nin == nil) then table.insert(AnyoneCore.Settings.PrepullHelper, Player.job,{ enabled = true, sprint = true, peloton = true, divineveil = true, backflip = true, placepet = true, aetherpact = true, badteamdelay = 300, doton = false, level70nin = false}) AnyoneCore.save(true) end\n            \n            local hovered = false\n            AnyoneCore.Settings.PrepullHelper[Player.job].enabled, changed = GUI:Checkbox(GetString(\"Enable Prepull Helper\"), AnyoneCore.Settings.PrepullHelper[Player.job].enabled)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Helps with pre-pull before you start the boss fight.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Careful if you've got a trigger happy team. If this is enabled and you're AFK, your team will be really confused how you were attacking the boss while AFK.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            if (Player.job == 23 or Player.job == 31 or Player.job == 38) then\n                local hovered = false\n                AnyoneCore.Settings.PrepullHelper[Player.job].peloton, changed = GUI:Checkbox(GetString(\"Use Peloton in prepull\"), AnyoneCore.Settings.PrepullHelper[Player.job].peloton)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Enables the use of Peloton during prepull helper.\\n\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"Could turn it off if you feel like your team thinks you're too dumb to be using peloton in prepull. LUL\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\t\t\t\n            end ---end of job check\n            if Player.job == 22 then\n                local hovered = false\n                AnyoneCore.Settings.PrepullHelper[Player.job].backflip, changed = GUI:Checkbox(GetString(\"Use Backflip in prepull\"), AnyoneCore.Settings.PrepullHelper[Player.job].backflip)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Uses Elusive Jump to get to the boss at the end of the countdown.\\n\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"Line yourself up to backflip into max attack range of the boss, and not inside the bosses actual hitbox. Otherwise you will pull too early.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n            if Player.job == 19 then\n                local hovered = false\n                AnyoneCore.Settings.PrepullHelper[Player.job].divineveil, changed = GUI:Checkbox(GetString(\"Use Divine Veil in prepull\"), AnyoneCore.Settings.PrepullHelper[Player.job].divineveil)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Pops divine veil in prepull for healers to trigger and mitigate tankbusters in the first 30 seconds of the fight.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n            if Player.job == 21 or Player.job == 19 or Player.job == 32 or Player.job == 37 or Player.job == 22 or Player.job == 34 or Player.job == 30 or Player.job == 20 then -- check for melee\n                local hovered = false\n                AnyoneCore.Settings.PrepullHelper[Player.job].sprint, changed = GUI:Checkbox(GetString(\"Use Sprint in prepull\"), AnyoneCore.Settings.PrepullHelper[Player.job].sprint)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Pops sprint during prepull. Only works on melee jobs.\\n\\nMight be bad if you need to pop sprint early in the fight, like in e5s or e8s.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n            if Player.job == 30 then -- check for melee\n                local hovered = false\n                AnyoneCore.Settings.PrepullHelper[Player.job].doton, changed = GUI:Checkbox(GetString(\"Use Doton in prepull\"), AnyoneCore.Settings.PrepullHelper[Player.job].doton)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Uses doton in Prepull.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n            if Player.job == 30 then -- check for melee\n                local hovered = false\n                AnyoneCore.Settings.PrepullHelper[Player.job].level70nin, changed = GUI:Checkbox(GetString(\"Use Raiton instead of Suiton in prepull\"), AnyoneCore.Settings.PrepullHelper[Player.job].level70nin)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"This is pretty much only for UCoB and UwU. There's no reason to use this anywhere else.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n            if Player.job == 27 then\n                local hovered = false\n                AnyoneCore.Settings.PrepullHelper[Player.job].placepet, changed = GUI:Checkbox(GetString(\"Place pet on boss in prepull\"), AnyoneCore.Settings.PrepullHelper[Player.job].placepet)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Places your pet on top of the boss after countdown starts.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                GUI:SameLine()\n                local hovered = false\n                AnyoneCore.Settings.PrepullHelper[Player.job].aetherpact, changed = GUI:Checkbox(GetString(\"Use Prepull Aetherpact\"), AnyoneCore.Settings.PrepullHelper[Player.job].aetherpact)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Allows for a bit of a tricky play with moving your pet around to avoid casting Aetherpact but still ticks the cooldown down. For now, Prepull Helper will only do this if you're in e8s since it's the only fight where it's viable.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n            local hovered = false\n            GUI:PushItemWidth(80)\n            AnyoneCore.Settings.PrepullHelper[Player.job].badteamdelay, changed = GUI:InputInt(GetString(\"# of milliseconds to pull early\"), AnyoneCore.Settings.PrepullHelper[Player.job].badteamdelay)\n            if changed then AnyoneCore.ValidInput() end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Let's face it, most people don't pull on time. Sometimes people will even pull up to a full second early. Change this to make prepull helper pull the boss earlier if your team is consistently pulling early.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Based on milliseconds. Putting this to 200 means it will pull 200 milliseconds before the countdown ends.\"))\n                GUI:TextColored(1,0,0,1,GetString(\"You usually want this setting to be about 200 to 300 milliseconds by default since most teams will never pull exactly on time.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            GUI:PopItemWidth( )\n        end\n        if (GUI:CollapsingHeader(GetString(\"Face Away Helper\"))) then\n            local hovered = false\n            AnyoneCore.Settings.FaceAwayEnabler, changed = GUI:Checkbox(GetString(\"Enable Face Away Helper\"), AnyoneCore.Settings.FaceAwayEnabler)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:TextColored(0.50,0.50,0,1,GetString(\"A huge thank you to Dedodedo from Rikudou's discord who created Face Away Helper. All I did was clean it up, add a few more options and put it in AnyoneCore. Send dedodedo#5099 all of your love.\"))\n                GUI:Text(GetString(\"Enables Face Away Helper, which will help you keep casting spells while actively avoiding looking at the boss for look away mechanics.\\n\\nThis works for any job, but works especially well with casters, and samurai.\"))\n                GUI:TextColored(1,0,0,1,GetString(\"[Warning]\"))\n                GUI:TextColored(1,0.10,0,1,GetString(\"Do not stand inside the bosses hitbox during the look away mechanics.\\n\\nDo not hold any mouse keys while Face Away Helper is doing it's thing.\\n\\nTry not to move while Face Away helper is doing it's thing.\\n\\nNo, this will not work for Shiva's mirror mechanics. \"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\t\t\t\t\n            local hovered = false\n            AnyoneCore.Settings.UseKeybind, changed = GUI:Checkbox(GetString(\"Use a keybind to set facing\"), AnyoneCore.Settings.UseKeybind)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Allows you to use Face Away Helper entirely by yourself through use of a keybind. The keybind can be set to any key, but unfortunately not multiple keys at once.\\n\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            \n            if AnyoneCore.Settings.UseKeybind == true then\n                GUI:SameLine()\n                local hovered = false\n                AnyoneCore.Settings.Keybind, changed = GUI:Keybind(\"\", AnyoneCore.Settings.Keybind, 40)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Press any key to set as the keybind to use Face Away.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n            \n            local hovered = false\n            AnyoneCore.Settings.UseFaceAwayReactions, changed = GUI:Checkbox(GetString(\"Enable the usage of reactions to activate Face Away automatically\"), AnyoneCore.Settings.UseFaceAwayReactions)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Face Away helper can also be used automatically through the use of reactions, you could even call it yourself by putting 'FaceAway.FaceAway = true' in a LUA reaction.\\n\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            \n            local hovered = false\n            AnyoneCore.Settings.DrawFaceAway, changed = GUI:Checkbox(GetString(\"Draw Face Away safe zone using Argus\"), AnyoneCore.Settings.DrawFaceAway)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"If the user owns Argus, Face Away can be drawn, it'll show the danger zone where an eye effect would affect you, and then a safe zone where you can effectively cast spells without interruption and not get affected.\\n\"))\n                GUI:TextColored(1,0,0,1,GetString(\"[Warning]\"))\n                GUI:TextColored(1,1,0,1,GetString(\"On non-Tensor jobs while using TensorDrift, this draw can look fairly wonky and will show you looking directly at the boss. But this isn't the case, it's just how TensorDrift works. You'll still be safe.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n\n            if AnyoneCore.Settings.DrawFaceAway == true then\n                local hovered = false\n                AnyoneCore.Settings.DrawFaceAwayNoReactions, changed = GUI:Checkbox(GetString(\"Don't draw reactions-based Face Away\"), AnyoneCore.Settings.DrawFaceAwayNoReactions)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Makes it so the draws for using a keybind still show up, but not when done through reactions.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n        end\n        \n        if (GUI:CollapsingHeader(GetString(\"Duty Helper\"))) then\n\n            if AnyoneCore.Settings.DutyHelper == true or AnyoneCore.Settings.DutyHelper == false then AnyoneCore.Settings.DutyHelper = {} end\n            if AnyoneCore.Settings.DutyHelper[Player.job] == nil then \n                table.insert(AnyoneCore.Settings.DutyHelper, Player.job,{mitigation = true, targeting = true, interrupt = true, knockback = true, grabaggro = true}) \n                AnyoneCore.save(true)\n            end\n\n            if AnyoneCore.Settings.PrepullHelper == true or AnyoneCore.Settings.PrepullHelper == false then AnyoneCore.Settings.PrepullHelper = {} end\n            if AnyoneCore.Settings.PrepullHelper[Player.job] == nil then \n                table.insert(AnyoneCore.Settings.PrepullHelper, Player.job,{ enabled = true, sprint = true, peloton = true, divineveil = true, backflip = true, placepet = true, aetherpact = true, badteamdelay = 300 }) \n                AnyoneCore.save(true)\n            end\n\n            local hovered = false\n            AnyoneCore.Settings.DutyHelper.enabled, changed = GUI:Checkbox(GetString(\"Enable Duty Helper\"), AnyoneCore.Settings.DutyHelper.enabled)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Enables a multitude of features that help in dungeons. Automatic usage of mitigation like Tactician and Troubador. Automatic usage of Arm's Length, and Head Graze.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Not meant to be turned on for fights that have a timeline. The features will likely interfere with each other. Any features after this one won't work unless this setting is enabled.\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Only Stormblood and beyond content is supported.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            local hovered = false\n            AnyoneCore.Settings.DutyHelper.requirebotenabled, changed = GUI:Checkbox(GetString(\"Require assist mode to be enabled\"), AnyoneCore.Settings.DutyHelper.requirebotenabled)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"With this on, Duty Helper will only work if assist is turned on. You might want this off if you're using Dungeon Master, since it runs in a passive state where assist is technically disabled.\\n\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            local hovered = false\n            AnyoneCore.Settings.DutyHelper[Player.job].targeting, changed = GUI:Checkbox(GetString(\"Always target something\"), AnyoneCore.Settings.DutyHelper[Player.job].targeting)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Helps with retargeting the boss or mobs in a dungeon. If you don't have a current target, while in combat and bot is enabled, then target nearest monster.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Works regardless of timelines. Duty Helper must be enabled.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            \n            local hovered = false\n            AnyoneCore.Settings.DutyHelper[Player.job].mitigation, changed = GUI:Checkbox(GetString(\"Mitigation usage\"), AnyoneCore.Settings.DutyHelper[Player.job].mitigation)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Enables spells like tactician/troubador/shield samba to be used alongside Duty Helper to mitigate incoming damage.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Works regardless of timelines. Duty Helper must be enabled.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            \n            if Player.job == 32 or Player.job == 37 or Player.job == 19 or Player.job == 21 then\n                local hovered = false\n                AnyoneCore.Settings.DutyHelper[Player.job].grabaggro, changed = GUI:Checkbox(GetString(\"Aggro management in dungeons\"), AnyoneCore.Settings.DutyHelper[Player.job].grabaggro)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Helps regain aggro on mobs that you've lost aggro on. Will not work in 8/24 man raids, on purpose.\\n\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"Works regardless of timelines. Duty Helper must be enabled.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n            \n            local hovered = false\n            AnyoneCore.Settings.DutyHelper[Player.job].interrupt, changed = GUI:Checkbox(GetString(\"Automatically interrupt casts\"), AnyoneCore.Settings.DutyHelper[Player.job].interrupt)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Interrupts stuff that is interruptable in duties.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Works regardless of timelines. Duty Helper must be enabled.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            \n            local hovered = false\n            AnyoneCore.Settings.DutyHelper[Player.job].knockback, changed = GUI:Checkbox(GetString(\"Use anti-knockback spells\"), AnyoneCore.Settings.DutyHelper[Player.job].knockback)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Uses arm's length or surecast when applicable.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Works regardless of timelines. Duty Helper must be enabled.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n        end\n\n        if (GUI:CollapsingHeader(GetString(\"Shotcaller\"))) then\n            local hovered = false\n            AnyoneCore.Settings.Shotcaller, changed = GUI:Checkbox(GetString(\"Enable Shotcaller\"), AnyoneCore.Settings.Shotcaller)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(350)\n                GUI:Text(GetString(\"Works like Cactbot, allows you to put messages on your screen for callouts, or if you have MoogleTTS, use text to speech.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Syntax to make your own reactions with it: \\nAnyoneCore.Shotcall(text, tts, timer, important)\\nVariables must be: (string, boolean, integer, boolean)\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Example: \\nAnyoneCore.Shotcall('Hello world', true, 5, true)\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n\n            local hovered = false\n            AnyoneCore.Settings.ShotcallerLockPlacement, changed = GUI:Checkbox(GetString(\"Lock window placement\"), AnyoneCore.Settings.ShotcallerLockPlacement)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(350)\n                GUI:Text(GetString(\"Unlocking will let you move where Shotcaller is located.\\n\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n\n            GUI:PushItemWidth(70)\n            local hovered = false\n            AnyoneCore.Settings.ShotcallerSize, changed = GUI:SliderFloat(\"Font size\", AnyoneCore.Settings.ShotcallerSize, 1, 5)\n            if changed then AnyoneCore.ValidInput() end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Allows you to set the size of Shotcaller's text. Unlock placement to get a better view of what it will look like.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Ctrl + Left click to set a custom value\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            GUI:PopItemWidth()\n            local ShotcallerColorNormal,ShotcallerColorImportant = AnyoneCore.Settings.ShotcallerColor.normal,AnyoneCore.Settings.ShotcallerColor.important\n            local hovered = false\n\t\t\tGUI:ColorButton(\"Shotcaller Text Color\", AnyoneCore.Settings.ShotcallerColor.normal.r, AnyoneCore.Settings.ShotcallerColor.normal.g, AnyoneCore.Settings.ShotcallerColor.normal.b, 1, 0, GUI:GetFrameHeight(), GUI:GetFrameHeight()) if not hovered then hovered = GUI:IsItemHovered() end\n\t\t\tif GUI:IsItemClicked(0) then\n\t\t\t\tGUI:OpenPopup(\"Shotcaller Color Editor\")\n\t\t\tend\n            GUI:SameLine(0,5)\n\t\t\tGUI:Text(GetString(\"Text Color\"))\n\t\t\tif not hovered then hovered = GUI:IsItemHovered() end\n\t\t\tif GUI:IsItemClicked(0) then\n\t\t\t\tGUI:OpenPopup(\"Shotcaller Color Editor\")\n\t\t\tend\n\t\t\tif hovered then\n\t\t\t\tGUI:BeginTooltip()\n\t\t\t\tGUI:PushTextWrapPos(300)\n\t\t\t\tGUI:Text(GetString(\"Left-click to change color settings of Shotcaller.\")) GUI:SameLine(0,0)\n\t\t\t\tGUI:PopTextWrapPos()\n\t\t\t\tGUI:EndTooltip()\n            end\n            if GUI:BeginPopup(\"Shotcaller Color Editor\", GUI.WindowFlags_NoTitleBar + GUI.WindowFlags_NoResize + GUI.WindowFlags_NoMove + GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoScrollWithMouse + GUI.WindowFlags_NoCollapse + GUI.WindowFlags_NoSavedSettings) then\n                GUI:ColorEditMode(GUI.ColorEditMode_NoInputs + GUI.ColorEditMode_AlphaBar)\n                local r,g,b,a,changed = GUI:ColorEdit4(\"Normal Calls Color##ShotcallerColor\",ShotcallerColorNormal.r, ShotcallerColorNormal.g, ShotcallerColorNormal.b, ShotcallerColorNormal.a)\n                if (changed) then\n                    AnyoneCore.Settings.ShotcallerColor.normal = {r=r,g=g,b=b,a=a}\n                    AnyoneCore.save(true)\n                end\n                local r,g,b,a,changed = GUI:ColorEdit4(\"Important Calls Color##ShotcallerColor\",ShotcallerColorImportant.r, ShotcallerColorImportant.g, ShotcallerColorImportant.b, ShotcallerColorImportant.a)\n                if (changed) then\n                    AnyoneCore.Settings.ShotcallerColor.important = {r=r,g=g,b=b,a=a}\n                    AnyoneCore.save(true)\n                end\n                GUI:EndPopup()\n            end\n        end\n\n    elseif (tabname == GetString(\"Reactions\")) then\n\n        AnyoneCore.Settings.HideUnrelatedJobs, changed = GUI:Checkbox(GetString(\"Show only options available to my job\"), AnyoneCore.Settings.HideUnrelatedJobs)\n        if changed then AnyoneCore.save(true) end\n        \n        if (GUI:CollapsingHeader(GetString(\"Eden's Verse settings\"))) then\n            GUI:Dummy(10,0) GUI:SameLine(0,0)\n            if (GUI:CollapsingHeader(GetString(\"e5s settings\", GUI.TreeNodeFlags_Bullet))) then\n                GUI:Indent(100)\n                if (Player.job == 25) or AnyoneCore.Settings.HideUnrelatedJobs == false then\n                    local hovered = false\n                    AnyoneCore.Settings.e5sDisableTranspose, changed = GUI:Checkbox(GetString(\"Disable transpose for this fight\"), AnyoneCore.Settings.e5sDisableTranspose)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"For maximum uptime, disabling transpose may be better due to the short phase transition times in this fight. Since it's short enough that transpose could clip into starting a new cast after the knockbacks.\\n\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                end\n                if (Player.job ~= 25) and AnyoneCore.Settings.HideUnrelatedJobs == true then\n                    GUI:Text(GetString(\"Current job doesn't have any settings for e5s.\\n\"))\n                end\n                GUI:Unindent()\n            end\n            GUI:Dummy(10,0) GUI:SameLine(0,0)\n            if (GUI:CollapsingHeader(GetString(\"e6s settings\", GUI.TreeNodeFlags_Bullet))) then\n                GUI:Indent(100)\n                if Player.job == 34 or AnyoneCore.Settings.HideUnrelatedJobs == false then\n                    local hovered = false\n                    AnyoneCore.Settings.AttackingGaruda, changed = GUI:Checkbox(GetString(\"Attack Garuda during split phase\"), AnyoneCore.Settings.AttackingGaruda)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"Only enable if you're specifically attacking garuda during the e6s split phase. If enabled, will not waste the time re-applying Higanbana to ifrit if it won't last long enough to be worth it.\\n\"))\n                        GUI:TextColored(1,1,0,1,GetString(\"Only matters if you're using my e6s timeline.\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                end\n                if Player.job == 31 or Player.job == 23 or Player.job == 38 or AnyoneCore.Settings.HideUnrelatedJobs == false then ---brd/mch/dnc\n                    local hovered = false\n                    AnyoneCore.Settings.NorthStratMitigation, changed = GUI:Checkbox(GetString(\"Mitigate Strike Spark\"), AnyoneCore.Settings.NorthStratMitigation)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"Uses rdps mitigation before Strike Spark.\"))\n                        GUI:TextColored(1,1,0,1,GetString(\"Sometimes teams will choose to go north for Strike Spark for the sake of melee uptime. Since there's a lot of outgoing damage here, it's usually a good idea to use rdps mitigations. So enable this to throw out tactician/shield samba/troubador before strike spark.\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                end\n                if (Player.job ~= 34 and Player.job ~= 23 and Player.job ~= 31 and Player.job ~= 38) and AnyoneCore.Settings.HideUnrelatedJobs == true then\n                    GUI:Text(GetString(\"Current job doesn't have any settings for e6s.\\n\"))\n                end\n                GUI:Unindent()\n            end\n            GUI:Dummy(10,0) GUI:SameLine(0,0)\n            if (GUI:CollapsingHeader(GetString(\"e7s settings\", GUI.TreeNodeFlags_Bullet))) then\n                GUI:Indent(100)\n                local hovered = false\n                AnyoneCore.Settings.DisableAssist, changed = GUI:Checkbox(GetString(\"Away With Thee safe strat\"), AnyoneCore.Settings.DisableAssist)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Disables minion's assist function slightly before Away With Thee teleports go out. Allows you to position yourself correctly without getting mispositioned by a skill usage.\\n\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"Alternatively, you can use LMB + RMB + S and then wiggle your camera while facing the correct direction. This will result in much better uptime. Test this on a striking dummy first to get the feel for it.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                local hovered = false\n                AnyoneCore.Settings.AddsPhasePot, changed = GUI:Checkbox(GetString(\"Adds phase potion\"), AnyoneCore.Settings.AddsPhasePot)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Uses pot during adds phase in e7s immediately after Away With Thee teleport ends. This will allow you to get in a 3rd pot usage if your kill time is over 9 minutes and 30 seconds long.\\n\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"Only matters if you're playing machinist, it's disabled otherwise. If your kill time is shorter than 9 minutes and 30 seconds, turn this off.\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"Potions still need to be turned on with your quick toggles at the start of the fight for this to work.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                GUI:Unindent()\n            end\n            GUI:Dummy(10,0) GUI:SameLine(0,0)\n            if (GUI:CollapsingHeader(GetString(\"e8s settings\", GUI.TreeNodeFlags_Bullet))) then\n                GUI:Indent(100)\n                local hovered = false\n                AnyoneCore.Settings.KnockbackMirrorUptime, changed = GUI:Checkbox(GetString(\"Knockback mirrors uptime strat\"), AnyoneCore.Settings.KnockbackMirrorUptime)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Automatically uses Arm's Length or Surecast during knockback mirrors aka Reflected Wings. Will allow you to nullify both knockbacks.\\n\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"If you're getting knocked back still, check the read me for more information on how to modify the timing based on your needs.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                if AnyoneCore.Settings.KnockbackMirrorUptime == true then\n                    GUI:SameLine()\n                    local hovered = false\n                    AnyoneCore.Settings.SaferKnockback, changed = GUI:Checkbox(GetString(\"High ping mode\"), AnyoneCore.Settings.SaferKnockback)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:TextColored(1,1,0,1,GetString(\"Primarily for high ping users having issues with this knockback. Makes it so the reaction will disable assist earlier.\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                end\n                \n                local hovered = false\n                AnyoneCore.Settings.DiamondFrostUptime, changed = GUI:Checkbox(GetString(\"Diamond Frost uptime strat\"), AnyoneCore.Settings.DiamondFrostUptime)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Automatically uses Arm's Length or Surecast during Diamond Frost. \\n\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"Definitely do not have this enabled if you're not doing this strat.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                \n                if Player.job == 31 or Player.job == 23 or Player.job == 38 or AnyoneCore.Settings.HideUnrelatedJobs == false then\n                    local hovered = false\n                    AnyoneCore.Settings.LeftSide, changed = GUI:Checkbox(GetString(\"Left side adds\"), AnyoneCore.Settings.LeftSide)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"Uncheck this if you're on the right side for adds phase. Affects Earthen Aether interrupt order.\\n\"))\n                        GUI:TextColored(1,1,0,1,GetString(\"Only matters if you're a ranged dps, it's disabled otherwise.\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                    if AnyoneCore.Settings.LeftSide == true then\n                        GUI:SameLine()\n                        local hovered = false\n                        AnyoneCore.Settings.InterruptSecondAdd, changed = GUI:Checkbox(GetString(\"Interrupt the second Earthen Aether instead\"), AnyoneCore.Settings.InterruptSecondAdd)\n                        if changed then AnyoneCore.save(true) end\n                        if not hovered then hovered = GUI:IsItemHovered() end\n                        if hovered then\n                            GUI:BeginTooltip()\n                            GUI:PushTextWrapPos(300)\n                            GUI:Text(GetString(\"If checked, reactions will interrupt the second Earthen Aether instead of the first. Unchecked, it will interrupt the first.\\n\"))\n                            GUI:TextColored(1,1,0,1,GetString(\"Only matters if you're on left side.\"))\n                            GUI:TextColored(2,2,0,2,GetString(\"Only matters if you're machinist or bard, it's disabled otherwise.\"))\n                            GUI:PopTextWrapPos()\n                            GUI:EndTooltip()\n                        end\n                    end -- end of left side check\n                    local hovered = false\n                    AnyoneCore.Settings.NewTargetMethod, changed = GUI:Checkbox(GetString(\"New adds phase targeting order\"), AnyoneCore.Settings.NewTargetMethod)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"Follows the current pug strats for dealing with adds as a ranged DPS. Disable to get the old method back.\\n\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                end -- end of brd/mch/dnc job check\n                if Player.job == 23 or AnyoneCore.Settings.HideUnrelatedJobs == false then -- check for bard\n                    local hovered = false\n                    AnyoneCore.Settings.UseCleanse, changed = GUI:Checkbox(GetString(\"Cleanse with Warden's Paean\"), AnyoneCore.Settings.UseCleanse)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"Enables usage of Warden's Paean to cleanse debuffs off people.\\n\"))\n                        GUI:TextColored(1,1,0,1,GetString(\"This currently only is applicable to using Paean's to cleanse the tanks during icelit dragonsong in e8s.\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                    if AnyoneCore.Settings.UseCleanse == true then\n                        GUI:SameLine()\n                        local hovered = false\n                        AnyoneCore.Settings.UseCleanseTop, changed = GUI:Checkbox(GetString(\"Prioritize top of the party list\"), AnyoneCore.Settings.UseCleanseTop)\n                        if changed then AnyoneCore.save(true) end\n                        if not hovered then hovered = GUI:IsItemHovered() end\n                        if hovered then\n                            GUI:BeginTooltip()\n                            GUI:PushTextWrapPos(300)\n                            GUI:Text(GetString(\"Warden's Paean will prioritize the person on the top of the party list. This usually means the first tank on your party list.\\n\"))\n                            GUI:PopTextWrapPos()\n                            GUI:EndTooltip()\n                        end\n                    end\n                end\n                GUI:Unindent()\n            end\n        end\n        \n        if (GUI:CollapsingHeader(GetString(\"Ultimate settings\"))) then\n            GUI:Dummy(10,0) GUI:SameLine(0,0)\n            if (GUI:CollapsingHeader(GetString(\"UCoB settings\", GUI.TreeNodeFlags_Bullet))) then\n                GUI:Indent(100)\n                GUI:Text(GetString(\"no settings right now :(\"))\n                GUI:Unindent()\n            end\n            \n            GUI:Dummy(10,0) GUI:SameLine(0,0)\n            if (GUI:CollapsingHeader(GetString(\"UwU settings\", GUI.TreeNodeFlags_Bullet))) then\n                if Player.job == 31 or Player.job == 23 or Player.job == 38 or AnyoneCore.Settings.HideUnrelatedJobs == false then\n                    local hovered = false\n                    GUI:Indent(100)\n                    GUI:PushItemWidth(40)\n                    if not AnyoneCore.Data.PrimalRoulette then AnyoneCore.Data.PrimalRoulette = {1,2,3} end\n                    if GUI:BeginCombo(\"##primalroulettemitigation\",AnyoneCore.Settings.PrimalRouletteMitigation,GUI.ComboFlags_HeightRegular) then\n                        for k,v in pairs(AnyoneCore.Data.PrimalRoulette) do\n                            local values = v\n                            local isselected = AnyoneCore.Settings.PrimalRouletteMitigation == values\n                            local selected,changed = GUI:Selectable(values,isselected)\n                            if selected and AnyoneCore.Settings.PrimalRouletteMitigation ~= values then\n                                AnyoneCore.Settings.PrimalRouletteMitigation = values\n                                AnyoneCore.save(true)\n                            end\n                        end\n                        GUI:EndCombo()\n                    end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    GUI:PopItemWidth()\n                    GUI:SameLine() GUI:Text(GetString(\"Which primal to use mitigation for in roulette\"))\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"Generally most groups will have the ranged dps use it on 2nd primal, but if you have multiple ranged dps you might want to change it around.\"))\n                        GUI:TextColored(1,1,0,1,GetString(\"1 is 1st primal to appear, 2 is 2nd primal to appear, and 3 is 3rd primal to appear, all in order.\"))\n                        GUI:TextColored(1,1,0,1,GetString(\"Additionally, if this wasn't properly configured to the party and someone used tactician/samba/troubadour when it was your turn, it will roll over to the next primal and use mitigation then instead.\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                    GUI:Unindent()\n                end\n            end\n            \n            GUI:Dummy(10,0) GUI:SameLine(0,0)\n            if (GUI:CollapsingHeader(GetString(\"TEA settings\", GUI.TreeNodeFlags_Bullet))) then\n                GUI:Indent(100)\n                local hovered = false\n                AnyoneCore.Settings.TargetDolls, changed = GUI:Checkbox(GetString(\"Automatically target dolls\"), AnyoneCore.Settings.TargetDolls)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Targets the dolls when they spawn\\n\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"Could cause an issue if your positioning is weird, turn it off if it's not consistent..\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                if Player.job == 23 or AnyoneCore.Settings.HideUnrelatedJobs == false then\n                    local hovered = false\n                    AnyoneCore.Settings.ForceApexDolls, changed = GUI:Checkbox(GetString(\"Force Apex Arrow on LL during dolls if gauge is full\"), AnyoneCore.Settings.ForceApexDolls)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"If your gauge fills up in the middle of dolls, it'll dump Apex Arrow on living liquid to avoid a dps loss of needing to hold it. Will only be used if your own doll's HP is above 60 percent to avoid killing it.\\n\"))\n                        GUI:TextColored(1,1,0,1,GetString(\"Could accidentally kill another player's doll if it's in the way.\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                end\n                if Player.job == 38 or AnyoneCore.Settings.HideUnrelatedJobs == false then\n                    local hovered = false\n                    AnyoneCore.Settings.DontDisableStandardDolls, changed = GUI:Checkbox(GetString(\"Don't disable Standard Step during dolls\"), AnyoneCore.Settings.DontDisableStandardDolls)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"The safe strat is to disable Standard Step during Jagd Dolls, otherwise you might kill the 3rd feed doll. Keeping it enabled pads DPS, but you will need to communicate this with your teammates, or position properly to not hit the 3rd/4th feed doll.\\n\"))\n                        GUI:TextColored(1,1,0,1,GetString(\"Could accidentally kill another player's doll if it's in the way.\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                end\n                if Player.job == 27 or AnyoneCore.Settings.HideUnrelatedJobs == false then\n                    local hovered = false\n                    AnyoneCore.Settings.UseDotsToFinishDolls, changed = GUI:Checkbox(GetString(\"Let dots tick dolls below 25 and swap off earlier\"), AnyoneCore.Settings.UseDotsToFinishDolls)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"To maximize DPS, a better strat for summoners is to DoT your own doll and then swap off the doll at 45, letting the DoT effect get the doll below 25 and then feeding.\\n\"))\n                        GUI:TextColored(1,1,0,1,GetString(\"Requires a bit of expertise, you'll have to make sure you focus target your doll so you know when it's below 25, and need to be ready to feed ASAP.\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                end\n                GUI:Unindent()\n            end\n        end\n        if Player.job == 23 or AnyoneCore.Settings.HideUnrelatedJobs == false then -- check for bard\n            if (GUI:CollapsingHeader(GetString(\"Bard settings\"))) then\n                local hovered = false\n                AnyoneCore.Settings.SongEntityCount, changed = GUI:Checkbox(GetString(\"Show number of people affected by songs\"), AnyoneCore.Settings.SongEntityCount)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Creates a small window that counts the number of people that have your songs\\n\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"Doesn't work if there are more than one bard in your party, it'll just count every single instance of the buff.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n        end\n\n        if Player.job == 38 or AnyoneCore.Settings.HideUnrelatedJobs == false then -- check for dancer\n            if (GUI:CollapsingHeader(GetString(\"Dancer settings\"))) then\n                local hovered = false\n                AnyoneCore.Settings.AutoPartner, changed = GUI:Checkbox(GetString(\"Automatically set partner\"), AnyoneCore.Settings.AutoPartner)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"If entering into a raid or dungeon and player doesn't have a dance partner, reactions will turn on 'auto partner' in SallyDNC and then turn it back off.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n        end\n        \n        if Player.job == 31 or AnyoneCore.Settings.HideUnrelatedJobs == false then -- check for machinist\n            if (GUI:CollapsingHeader(GetString(\"Machinist settings\"))) then\n                local hovered = false\n                AnyoneCore.Settings.AntiGhosting, changed = GUI:Checkbox(GetString(\"Anti-ghosting tech\"), AnyoneCore.Settings.AntiGhosting)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Sometimes if your ping is too high and you cast a skill right as the boss is going away, the skill will be used but it will deal no damage. But if you use a skill that generates gauge, you will gain that gauge but not deal any damage. So we can disable drill shortly before a phase transition to use a gauge skill instead.\\n\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"You can disable this if you have a fairly low ping, like under 30 ping. If your drills are still getting used but dealing no damage, you can just turn it back on.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n\n                local hovered = false\n                GUI:PushItemWidth(80)\n                if AnyoneCore.Data.preview == nil then\n                    AnyoneCore.Data.preview = AnyoneCore.Settings.QueenGauge[1].name\n                end\n                if GUI:BeginCombo(\"##queengauge\",AnyoneCore.Data.preview,GUI.ComboFlags_HeightRegular) then\n                    for k,v in pairs(AnyoneCore.Settings.QueenGauge) do\n                        local values = v.name\n                        local isselected = AnyoneCore.Data.preview == values\n                        local selected,changed = GUI:Selectable(values,isselected)\n                        if selected and AnyoneCore.Settings.selected ~= values then\n                            AnyoneCore.Data.preview = values\n                            AnyoneCore.Data.selected = k\n                        end\n                    end\n                    GUI:EndCombo()\n                end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                GUI:PopItemWidth()\n                GUI:SameLine()\n\n                GUI:PushItemWidth(70)\n                AnyoneCore.Settings.QueenGauge[AnyoneCore.Data.selected].gauge, changed = GUI:InputInt(GetString(\"Automatically set queen usage in ACR\"), AnyoneCore.Settings.QueenGauge[AnyoneCore.Data.selected].gauge)\n                if changed then AnyoneCore.ValidInput() end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Changes when your Summon Queen is used in TensorMagnum settings when you start this fight.\\n\\nAlternatively works for rook turret if in level 70 or below content.\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"The 'other' option is for setting your queen gauge everywhere other than what can be selected on the list.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                GUI:PopItemWidth()\n            end\n        end -- end of machinist job check\n        if Player.job == 21 or Player.job == 19 or Player.job == 32 or Player.job == 37 or Player.job == 22 or Player.job == 34 or Player.job == 30 or Player.job == 20 or AnyoneCore.Settings.HideUnrelatedJobs == false then -- check for melee\n            if (GUI:CollapsingHeader(GetString(\"Melee settings\"))) then\n                local hovered = false\n                AnyoneCore.Settings.NeverDash, changed = GUI:Checkbox(GetString(\"Never dash for me\"), AnyoneCore.Settings.NeverDash)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Enabling this will make it so reactions will never dash in for you. Dashes are mostly done after mechanics end when it's safe to do so, but could be annoying for teams with weird uptime strats.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                if (Player.job ~= 34 and Player.job ~= 30) or AnyoneCore.Settings.HideUnrelatedJobs == false then\n                    local hovered = false\n                    AnyoneCore.Settings.SafeDashing, changed = GUI:Checkbox(GetString(\"Safe Jumps/Dashing with Argus\"), AnyoneCore.Settings.SafeDashing)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"Enabling this will use Argus to detect if it's safe to jump or dash to a target. If not, jumping/dashing will be disabled.\\n\"))\n                        GUI:TextColored(1,1,0,1,GetString(\"Could possibly cause drift in jobs like Dragoon, but that's the price of safety I guess.\"))\n                        GUI:TextColored(1,0,0,1,GetString(\"This will take total control of your jumps/dash toggle, making you unable to change it yourself. Reactions will override this.\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                end\n            end\n        end\n        \n        if (GUI:CollapsingHeader(GetString(\"Argus settings\"))) then\n            if Argus ~= nil or AnyoneCore.Settings.HideUnrelatedJobs == false then\n                local hovered = false\n                AnyoneCore.Settings.DrawClouds, changed = GUI:Checkbox(GetString(\"e5s - Draw Stormcloud AoE radius\"), AnyoneCore.Settings.DrawClouds)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Draws a circle on the floor to show you the area where you'll get hit by the Chaos Strikes to cleanse lightning debuffs.\\n\"))\n                    GUI:TextColored(1,0,0,1,GetString(\"Bugs out badly if clouds combine.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                \n                local hovered = false\n                AnyoneCore.Settings.DrawChainLightning, changed = GUI:Checkbox(GetString(\"e5s - Draw Chain Lightning AoE size\"), AnyoneCore.Settings.DrawChainLightning)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Draws a circle around whoever has the Electrified debuff in e5s. Technically the AoE comes from the person it's passed to, but the circle should give you an idea of how far away you should be.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                local hovered = false\n                AnyoneCore.Settings.DrawOccludedFrontOrbs, changed = GUI:Checkbox(GetString(\"e6s - Draw Occluded Front orb explosions\"), AnyoneCore.Settings.DrawOccludedFrontOrbs)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Draws a circle around the orbs that spawn after Occluded Front during Garuda and Garuda/Ifrit phase.\\n\"))\n                    GUI:TextColored(1,0,0,1,GetString(\"Standing in the safe spot is not enough to be safe still unfortunately, you still need to make sure you won't be knocked into the orb.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n\n                local hovered = false\n                AnyoneCore.Settings.DrawBlackWhiteOrbs, changed = GUI:Checkbox(GetString(\"e7s - Draw black/white orbs\"), AnyoneCore.Settings.DrawBlackWhiteOrbs)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Draws the explosion radius of the orbs during tornado in e7s.\\n\"))\n                    GUI:TextColored(1,0,0,1,GetString(\"Slightly wonky, the orbs take a while to disappear and take a while to appear.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n\n                local hovered = false\n                AnyoneCore.Settings.DrawDragonHeads, changed = GUI:Checkbox(GetString(\"e8s - Draw dragon heads\"), AnyoneCore.Settings.DrawDragonHeads)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Draws the explosion radius of the dragon heads during Wyrm's Lament in e8s.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                \n                local hovered = false\n                AnyoneCore.Settings.DrawOrbs, changed = GUI:Checkbox(GetString(\"e8s - Draw Light Rampant Orbs\"), AnyoneCore.Settings.DrawOrbs)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Draws the explosion radius of the orbs during Light's Rampant in e8s.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n\n                local hovered = false\n                AnyoneCore.Settings.DrawNaelQuotes, changed = GUI:Checkbox(GetString(\"UCoB - All drawing mechanics\"), AnyoneCore.Settings.DrawNaelQuotes)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Toggles all of the draws in UCoB, there's like 40 so there's only this one option. Draws EVERY Nael Quote, Earthshaker Cones, twisters/twisting dives and people with Thunderstruck debuff.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                \n                local hovered = false\n                AnyoneCore.Settings.DrawNaelQuotes, changed = GUI:Checkbox(GetString(\"UwU - All drawing mechanics\"), AnyoneCore.Settings.DrawNaelQuotes)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Toggles all of the draws in UwU, there's quite a few so there's only this one option. Draws wicked wheel/tornado, draws nail positions, draws the edge of the arena, and a bunch more.\\n\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                \n                if Player.job == 34 or AnyoneCore.Settings.HideUnrelatedJobs == false then\n                    local hovered = false\n                    AnyoneCore.Settings.DrawYaten, changed = GUI:Checkbox(GetString(\"SAM - Draw Yaten distance\"), AnyoneCore.Settings.DrawYaten)\n                    if changed then AnyoneCore.save(true) end\n                    if not hovered then hovered = GUI:IsItemHovered() end\n                    if hovered then\n                        GUI:BeginTooltip()\n                        GUI:PushTextWrapPos(300)\n                        GUI:Text(GetString(\"If Yaten is enabled on the ACR, Argus will draw the distance behind you that Yaten will backstep.\\n\"))\n                        GUI:PopTextWrapPos()\n                        GUI:EndTooltip()\n                    end\n                end\n            else\n                d(\"Argus is not installed.\")\n            end\n        end\n        if (GUI:CollapsingHeader(GetString(\"Misc settings\"))) then\n            local hovered = false\n            AnyoneCore.Settings.UseSprint, changed = GUI:Checkbox(GetString(\"Use Sprint\"), AnyoneCore.Settings.UseSprint)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Enables reactions to use sprint for you.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Only works if you're using one of my timelines.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n            \n            local hovered = false\n            AnyoneCore.Settings.UseMoogleTTS, changed = GUI:Checkbox(GetString(\"Use Moogle TTS or chat messages to send me warnings\"), AnyoneCore.Settings.UseMoogleTTS)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"If you have MoogleTTS, it'll use TTS to remind you. Otherwise it'll remind you using a colored chat message along with a se.1 ping. \\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"MoogleTTS has to be installed to use the TTS option, if it's not installed will automatically do it the alternative way.\"))\n                GUI:TextColored(1,0,0,1,GetString(\"If you're streaming or recording, the sound will show up on the stream, and if you're not using MoogleTTS, the chat message could be seen by other people.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n\n            local hovered = false\n            AnyoneCore.Settings.CheckJob, changed = GUI:Checkbox(GetString(\"Warn me if I'm using the wrong profile\"), AnyoneCore.Settings.CheckJob)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Everytime you change map or wipe to a boss fight, AnyoneCore will check if you're currently loaded on the wrong profile for both General and Timeline triggers.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"If you're on the wrong profile, a yellow colored message will be sent to chat warning you about it.\"))\n                GUI:TextColored(0,1,0,1,GetString(\"If you use your own personal timeline or general triggers profile, I'd recommend turning this setting off since it'll go off.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n\n            if AnyoneCore.Settings.CheckJob == true then\n                local hovered = false\n                if GUI:Button(GetString(\"Set current timeline profile as default\")) then \n                    if AnyoneCore.Settings.timelineTable[Player.job][Player.localmapid] ~= nil then\n                        AnyoneCore.Settings.timelineTable[Player.job][Player.localmapid] = TensorCore.API.TensorReactions.getTimelineTriggerProfileName() \n                        AnyoneCore.save(true) \n                    else\n                        AnyoneCore.log(GetString(\"You're not in any zone that can receive warnings for being on the wrong timeline.\"), 3)\n                    end\n                end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Sets the currently loaded timeline as the default timeline for the 'wrong timeline warning'.\")) \n                    GUI:TextColored(1,1,0,1,GetString(\"You must already be inside the zone for this related timeline for this to work.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n            end\n\n            local hovered = false\n            AnyoneCore.Settings.CheckFood, changed = GUI:Checkbox(GetString(\"Warn me if I'm missing food buff\"), AnyoneCore.Settings.CheckFood)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Sends a message to chat if the player is missing food buff during Prepull Helper.\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Warning: this chat message can be seen in screenshots or while streaming. But it's client-sided so other players cannot see it.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n\n            if AnyoneCore.Settings.CheckFood == true then\n                local hovered = false\n                AnyoneCore.Settings.CheckFoodDuration, changed = GUI:Checkbox(GetString(\"Check if food duration is lower than\"), AnyoneCore.Settings.CheckFoodDuration)\n                if changed then AnyoneCore.save(true) end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                GUI:SameLine()\n                GUI:PushItemWidth(70)\n                AnyoneCore.Settings.CheckFoodDurationValue, changed = GUI:InputInt(GetString(\"minutes remaining\"), AnyoneCore.Settings.CheckFoodDurationValue)\n                if changed then AnyoneCore.ValidInput() end\n                if not hovered then hovered = GUI:IsItemHovered() end\n                if hovered then\n                    GUI:BeginTooltip()\n                    GUI:PushTextWrapPos(300)\n                    GUI:Text(GetString(\"Additionally, if food buff has under set amount of minutes remaining, send a warning.\"))\n                    GUI:TextColored(1,1,0,1,GetString(\"Warning: this chat message can be seen in screenshots or while streaming.\"))\n                    GUI:PopTextWrapPos()\n                    GUI:EndTooltip()\n                end\n                GUI:PopItemWidth()\n            end\n\n            local hovered = false\n            AnyoneCore.Settings.PotionOverride, changed = GUI:Checkbox(GetString(\"Always re-enable potions override\"), AnyoneCore.Settings.PotionOverride)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            GUI:SameLine() GUI:TextColored(1,0,0,1,GetString(\"[CAUTION]\"))\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Instead of checking if you had potions enabled from the previous pull, potions will just always get re-enabled after a wipe, no matter what. Helps for people who are forgetful I guess.\\n\"))\n                GUI:TextColored(1,0,0,1,GetString(\"Please note that this means it will get enabled even on map changes and in dungeons. This could easily end up wasting a ton of pots if you forget you had this enabled, so don't say I didn't warn you.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n        end\n\n    elseif (tabname == GetString(\"Extra\")) then\n\n        if GUI:BeginPopupModal(\"Download Qwert's Reactions\", true, GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoScrollWithMouse + GUI.WindowFlags_NoCollapse + GUI.WindowFlags_NoSavedSettings) then\n            GUI:PushTextWrapPos(500)\n            GUI:Text(GetString(\"If you have a personally edited timeline, back it up or change the file name now or it'll be overwritten by the updater.\\n\"))\n            GUI:TextColored(1,1,0,1,GetString(\"A backup of your files will be created in LuaMods/TensorReactionsBackup.\\n\"))\n            GUI:TextColored(1,0,0,1,GetString(\"Warning: if any of the folders leading up to your LuaMods folder has a space in it's name, AnyoneCore updater will not work.\\n\"))\n            if GUI:Button(GetString(\"Yes\")) then updater(3) GUI:CloseCurrentPopup() end \n            GUI:SameLine()\n            if GUI:Button(GetString(\"No\")) then GUI:CloseCurrentPopup() end\n            GUI:PopTextWrapPos()\n            GUI:EndPopup()\n        end\n        \n        if GUI:Button(GetString(\"Update Qwert's reactions\")) then GUI:OpenPopup(\"Download Qwert's Reactions\") end\n        \n        GUI:Spacing( )\n        GUI:Separator( )\n        GUI:Spacing( ) \n\n        local hovered = false\n        AnyoneCore.Settings.MiniReactionsTimer, changed = GUI:Checkbox(GetString(\"Mini Reactions Timer\"), AnyoneCore.Settings.MiniReactionsTimer)\n        if changed then AnyoneCore.save(true) end\n        if not hovered then hovered = GUI:IsItemHovered() end\n        if hovered then\n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(GetString(\"Adds a miniature version of the reactions timer you would normally find in the TensorReactions debug tab.\\n\"))\n            GUI:TextColored(1,1,0,1,GetString(\"Pretty much only helpful for planning and debugging. Nice to have something small and easy to stuff in the corner of your screen.\"))\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n        end\n\n        local hovered = false\n        AnyoneCore.Settings.AccurateCountdownTimer, changed = GUI:Checkbox(GetString(\"Accurate Countdown Timer\"), AnyoneCore.Settings.AccurateCountdownTimer)\n        if changed then AnyoneCore.save(true) end\n        if not hovered then hovered = GUI:IsItemHovered() end\n        if hovered then\n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(GetString(\"Creates a little window showing you a more accurate number for the current countdown.\\n\"))\n            GUI:TextColored(1,1,0,1,GetString(\"Similar feature to what's on XIVLauncher or Triggernometry, but built into Minion so you don't need to install triggernometry or XIVLauncher.\"))\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n        end\n        if AnyoneCore.Settings.AccurateCountdownTimer == true then\n            GUI:SameLine()\n            local hovered = false\n            AnyoneCore.Settings.SimpleCountdown, changed = GUI:Checkbox(GetString(\"Simple mode\"), AnyoneCore.Settings.SimpleCountdown)\n            if changed then AnyoneCore.save(true) end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Simplifies the countdown timer to just be a single number, and no progress bar.\\n\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n        end\n        \n        local hovered = false\n        AnyoneCore.Settings.AlwaysMini, changed = GUI:Checkbox(GetString(\"Always change bot menu to mini mode on startup\"), AnyoneCore.Settings.AlwaysMini)\n        if changed then AnyoneCore.save(true) end\n        if not hovered then hovered = GUI:IsItemHovered() end\n        if hovered then\n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(GetString(\"This is referring to the bot menu where you enable and disable assist. Enabling this means that on startup, that menu will always be put into the small version that you get when you press the arrow in the top right corner. \\n\"))\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n        end\n\n        local hovered = false\n        GUI:PushItemWidth(35)\n        if not AnyoneCore.Data.DebugLevels then AnyoneCore.Data.DebugLevels = {1,2,3} end\n        if GUI:BeginCombo(\"##debuglevel\",AnyoneCore.Settings.DebugLevel,GUI.ComboFlags_HeightRegular) then\n            for k,v in pairs(AnyoneCore.Data.DebugLevels) do\n                local values = v\n                local isselected = AnyoneCore.Settings.DebugLevel == values\n                local selected,changed = GUI:Selectable(values,isselected)\n                if selected and AnyoneCore.Settings.DebugLevel ~= values then\n                    AnyoneCore.Settings.DebugLevel = values\n                    AnyoneCore.save(true)\n                end\n            end\n            GUI:EndCombo()\n        end\n        GUI:PopItemWidth()\n        if not hovered then hovered = GUI:IsItemHovered() end\n        GUI:PopItemWidth()\n        GUI:SameLine() GUI:Text(GetString(\"Debug level\"))\n        if not hovered then hovered = GUI:IsItemHovered() end\n        if hovered then\n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(GetString(\"1: Minimal level of debug messages sent to console.\\n\\n2: Decent amount of debug messages that will accurately describe what AnyoneCore is up to.\\n\\n3: All debug messages will be logged in MinionPath/TensorReactions/AnyoneCore/Logs.\"))\n            GUI:TextColored(1,1,0,1,GetString(\"Logs can be deleted freely if there are no issues. But if you're having an issue, you'll likely be asked for the log.\"))\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n        end\n\n        local hovered = false\n        if GUI:Button(GetString(\"Generate debug log\")) then AnyoneCore.debug() end\n        if not hovered then hovered = GUI:IsItemHovered() end\n        if hovered then\n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(GetString(\"If you're having issues, press this button and send the file generated to Anyone#9549 on discord.\"))\n            GUI:TextColored(1,1,0,1,GetString(\"Generated log will be saved in: \"..GetLuaModsPath()..\"\\\\TensorReactions\\\\AnyoneCore\\\\Logs and will have 'Debugging_' at the start of the file name.\"))\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n        end\n\n        local hovered = false\n        if GUI:Button(GetString(\"Reset all settings to default\")) then \n            local LuaModsPath = GetLuaModsPath() \n            local SettingsPath = LuaModsPath .. \"\\\\TensorReactions\\\\AnyoneCore\\\\Settings.lua\"\n            FileDelete(SettingsPath) \n            AnyoneCore.log(GetString(\"Reloading AnyoneCore...\"), 2)\n            table.clear(Data)\n            table.clear(FaceAway.Data)\n            gAnyoneCoreInitialize = false\n            TensorCore.API.TensorReactions.reloadGeneralTriggers()\n            TensorCore.API.TensorReactions.reloadTimelineTriggers()\n        end\n        if not hovered then hovered = GUI:IsItemHovered() end\n        if hovered then\n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(GetString(\"This will reset ALL of your settings for AnyoneCore to default. This change cannot be undone.\"))\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n        end\n\n        GUI:Spacing( )\n        GUI:Separator( )\n        GUI:Spacing( ) \n        \n        local hovered = false\n        AnyoneCore.Settings.AutoSetSpeedHacks, changed = GUI:Checkbox(GetString(\"Automatically set speed hacks\"), AnyoneCore.Settings.AutoSetSpeedHacks)\n        if changed then AnyoneCore.save(true) end\n        if not hovered then hovered = GUI:IsItemHovered() end\n        if hovered then\n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(GetString(\"Sets your character speed to 7 (default is 6.0) at the start of a fight. Changes it back upon wiping. Approximately 15 percent faster walking speed.\\n\"))\n            GUI:TextColored(1,0,0,1,GetString(\"Changing the speed is safe detection-wise FOR NOW, but someone can report you. It could be especially dangerous if someone spots you running slightly faster than the rest of the group and saves a video of you doing so. In that case, it is dangerous to use, so use at your own discretion.\"))\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n        end\n        \n        local hovered = false\n        AnyoneCore.Settings.AutoSetMaxCameraZoom, changed = GUI:Checkbox(GetString(\"Automatically set max camera zoom on startup\"), AnyoneCore.Settings.AutoSetMaxCameraZoom)\n        if changed then AnyoneCore.save(true) end\n        if not hovered then hovered = GUI:IsItemHovered() end\n        if hovered then\n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(GetString(\"Changes your maximum camera zoom to 35 upon attaching bot (default is 20). Value can be changed with the input box.\\n\"))\n            GUI:TextColored(1,1,0,1,GetString(\"Reload AnyoneCore with the button on the sidebar after enabling to make changes take effect.\"))\n            GUI:TextColored(1,0,0,1,GetString(\"Absolutely do not use this while streaming. Be careful taking screenshots too. It is very noticable that your camera is zoomed out more than normal.\"))\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n        end\n        if AnyoneCore.Settings.AutoSetMaxCameraZoom == true then\n            GUI:SameLine()\n            local hovered = false\n            GUI:PushItemWidth(70)\n            AnyoneCore.Settings.CameraZoomValue, changed = GUI:InputInt(\"\", AnyoneCore.Settings.CameraZoomValue)\n            if changed then AnyoneCore.ValidInput() end\n            if not hovered then hovered = GUI:IsItemHovered() end\n            if hovered then\n                GUI:BeginTooltip()\n                GUI:PushTextWrapPos(300)\n                GUI:Text(GetString(\"Set the value you want your camera zoom to be set to.\\n\"))\n                GUI:TextColored(1,1,0,1,GetString(\"Reload AnyoneCore with the button on the sidebar after enabling to make changes take effect.\"))\n                GUI:TextColored(1,0,0,1,GetString(\"Absolutely do not use this while streaming. Be careful taking screenshots too. It is very noticable that your camera is zoomed out more than normal.\"))\n                GUI:PopTextWrapPos()\n                GUI:EndTooltip()\n            end\n        end\n    end -- end of tabs\n    --Code and idea for sidebar links was shamelessly stolen from Kali. Thank you Kali.\n    local winX,winY = GUI:GetWindowSize()\n    local posX,posY = GUI:GetWindowPos()\n    local min,max,rate,spacing,padding = 25,50,5,5,0\n    local windowsize = 25\n    for i=2, #AnyoneCore.Data.LinksTable do\n    local size = AnyoneCore.Data.LinksTable[i].size.x\n    if size and size > 0 and size > windowsize then windowsize = size end\n    end\n    GUI:PushStyleColor(GUI.Col_WindowBg, 0,0,0,0)\n    GUI:SetNextWindowPos(posX-windowsize-spacing,posY + 20,GUI.SetCond_Always)\n    GUI:SetNextWindowSize(max,((#AnyoneCore.Data.LinksTable - 1) * min) + ((#AnyoneCore.Data.LinksTable - 1) * spacing) + max,GUI.SetCond_Always)\n    GUI:PushStyleVar(GUI.StyleVar_WindowPadding,padding,padding)\n    GUI:PushStyleVar(GUI.StyleVar_ItemSpacing,spacing,spacing)\n    GUI:Begin(\"AnyoneCore##Sidebar\",true,GUI.WindowFlags_NoTitleBar + GUI.WindowFlags_NoResize + GUI.WindowFlags_NoMove + GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoScrollWithMouse + GUI.WindowFlags_NoCollapse + GUI.WindowFlags_NoFocusOnAppearing)\n    if GUI:IsWindowFocused(\"AnyoneCore##Sidebar\") then GUI:SetWindowFocus(AnyoneCore.name) end\n    for i=2, #AnyoneCore.Data.LinksTable do\n        local link = AnyoneCore.Data.LinksTable[i]\n        GUI:Dummy(windowsize-link.size.x,0) GUI:SameLine(0,0)\n        GUI:Image(link.icon,link.size.x,link.size.y)\n        if GUI:IsItemHovered() then\n            GUI:PopStyleVar(2)  \n            GUI:BeginTooltip()\n            GUI:PushTextWrapPos(300)\n            GUI:Text(link.tooltip)\n            GUI:PopTextWrapPos()\n            GUI:EndTooltip()\n            GUI:PushStyleVar(GUI.StyleVar_WindowPadding,padding,padding)\n            GUI:PushStyleVar(GUI.StyleVar_ItemSpacing,spacing,spacing)\n            if link.size.x < max then link.size.x = link.size.x + rate end\n            if link.size.y < max then link.size.y = link.size.y + rate end\n            if GUI:IsItemClicked(0) and link.link then\n                io.popen([[cmd /c start \"\" \"]]..link.link..[[\"]]):close()\n            elseif GUI:IsItemClicked(1) and link.link2 then\n                io.popen([[cmd /c start \"\" \"]]..link.link2..[[\"]]):close()\n            elseif GUI:IsItemClicked(0) and link.link3 then\n                AnyoneCoreReload()\n            end\n        else\n            if link.size.x > min then link.size.x = link.size.x - rate end\n            if link.size.y > min then link.size.y = link.size.y - rate end\n        end\n    end\n    GUI:End()\n    GUI:PopStyleColor()\n    GUI:PopStyleVar(2)\nend\nGUI:PopStyleColor(c)\nGUI:End()\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					3,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "main",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "GUI:SetNextWindowSize(10,10,GUI.SetCond_Once)\nGUI:Begin(\"AnyoneCore##MiniTimer\", AnyoneCore.Settings.MiniReactionsTimer,GUI.WindowFlags_NoTitleBar + GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoScrollWithMouse + GUI.WindowFlags_NoCollapse)\nif TensorReactions_CurrentTimer ~= nil then\n    GUI:Text(TensorReactions_CurrentTimer)\nend\nGUI:End()\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					4,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "mini reaction timer",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "GUI:SetNextWindowSize(32,32,GUI.SetCond_FirstUseEver)\nGUI:Begin(\"AnyoneCore##SongEntityCount\", AnyoneCore.Settings.MiniReactionsTimer,GUI.WindowFlags_NoTitleBar + GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoScrollWithMouse + GUI.WindowFlags_NoCollapse)\n    \nlocal party = TensorCore.getEntityGroupList(\"Party\")\nlocal count = {}\nfor _, ent in pairs(party) do\n    if TensorCore.hasBuff(ent, 2216, Player) or TensorCore.hasBuff(ent, 2217, Player) or TensorCore.hasBuff(ent, 2218, Player) then\n        count[#count+1] = ent\n    end\nend\nlocal r,g\nif table.size(TensorCore.getEntityGroupList(\"Party\")) >= 5 then\n    if #count <= 1 then\n    r = 1\n    g = 0\n    elseif #count <= 3 and #count > 1 then\n    r = 0.75\n    g = 0.25\n    elseif #count <= 5 and #count > 3 then\n    r = 0.5\n    g = 0.5\n    elseif #count <= 6 and #count > 5 then\n    r = 0.25\n    g = 0.75\n    elseif #count >= 7 then\n    r = 0\n    g = 1\n    end\nelseif table.size(TensorCore.getEntityGroupList(\"Party\")) <= 4 then\n    if #count <= 1 then\n    r = 1\n    g = 0\n    elseif #count <= 2 and #count > 1 then\n    r = 0.5\n    g = 0.5\n    elseif #count <= 3 and #count > 2 then\n    r = 0\n    g = 1\n    end\nend\nif r ~= nil and g ~= nil then\n    GUI:SetWindowFontSize(1.5)\n    GUI:TextColored(r,g,0,1,#count)\nend\nGUI:End()\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					5,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "entity song counter",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local WinFlags = (GUI.WindowFlags_NoTitleBar + GUI.WindowFlags_NoResize + GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoCollapse)\nGUI:SetNextWindowSize(60,50,GUI.SetCond_Always)\nFaceAway.visible, FaceAway.open = GUI:Begin(\"FaceAway\", FaceAway.open, WinFlags)\nif FaceAway.visible then\n    local childColorFace\n    local childColorKeybind\n    local target = Player:GetTarget()\n    -- Some stuff to check if we want to use keybinds or not and if so checks if ctrl is held down\n    if AnyoneCore.Settings.UseKeybind == true then\n        childColorKeybind = {r = 0, g = .1, b = 0, a = .75}\n        FaceAway.keybindstatus = \"On\"\n\n            if (GUI:IsKeyDown(AnyoneCore.Settings.Keybind)) == true then\n                CtrlIsDown = true\n            else\n                CtrlIsDown = false\n            end\n        else\n        childColorKeybind = {r = .1, g = 0, b = 0, a = .75 }\n        FaceAway.keybindstatus = \"Off\"\n    end\n    \n    \n    if (CtrlIsDown == true or FaceAway.FaceAway == true) and target and target.contentid < 30000 then\n        -- This presses the D key to update our position (https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes?redirectedfrom=MSDN)\n        PressKey(0x44)\n\n        -- some color/gui stuff\n        childColorFace = {r = 0, g = .1, b = 0, a = .75}\n        FaceAway.Data.facestatus = \"On\"\n        FaceAway.FaceAwayKey = true\n\n        -- stolen stuff from Anyone to get the heading\n        local behind\n        if FaceAway.Data.ReactionCalled == false then\n            behind = TensorCore.getHeadingToTarget(Player.pos, target.pos) \n        else\n            if FaceAway.Data.Entity ~= nil and FaceAway.Data.Entity.type ~= 2 then\n                behind = TensorCore.getHeadingToTarget(Player.pos, FaceAway.Data.Entity.pos)\n            else\n                behind = TensorCore.getHeadingToTarget(Player.pos, target.pos)\n            end\n        end\n        ---if ActionList:Get(1, 7526):IsFacing(target.id)\n        Player:SetFacing(behind+math.rad(60))\n\n        -- turns off legacy control if on, required to actually make the character turn and not move\n        if gAssistUseLegacy == true then\n            gAssistUseLegacy = false\n            ml_global_information.GetMovementInfo(false)\n            FaceAway.Data.LegacyWasOn = true\n        end\n        \n        FaceAway.Data.sleep = Now()\n        \n    else\n        if gAssistUseLegacy == false and FaceAway ~= nil and TimeSince(FaceAway.Data.sleep) >= 100 and FaceAway.Data.LegacyWasOn == true then\n            gAssistUseLegacy = true\n            ml_global_information.GetMovementInfo(false)\n            FaceAway.Data.LegacyWasOn = false\n        end\n        -- more gui and color stuff\n        childColorFace = {r = .1, g = 0, b = 0, a = .75 }\n        FaceAway.Data.facestatus = \"Off\"\n        FaceAway.FaceAwayKey = false\n    end\n\n    GUI:PushStyleVar(GUI.StyleVar_ChildWindowRounding,10)\n    GUI:PushStyleColor(GUI.Col_ChildWindowBg, childColorFace.r, childColorFace.g, childColorFace.b, childColorFace.a)\n    GUI:BeginChild(\"##extra3\", 40, 35, true)\n    GUI:AlignFirstTextHeightToWidgets()\n    GUI:Text(FaceAway.Data.facestatus)\n    GUI:EndChild()\n    -- lets us click it and enable disable it by clicking on the toggle\n    if (GUI:IsItemHovered()) then\n        if (GUI:IsMouseClicked(0)) and target then\n            FaceAway.FaceAway = not FaceAway.FaceAway\n        end\n    end\t\t\t\n    GUI:PopStyleColor()\n    GUI:PopStyleVar()\nend\nGUI:End()\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					6,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "face away helper",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if AnyoneCore.Data.lastUpdateCheck == nil then \nAnyoneCore.Data.lastUpdateCheck = Now() \nupdater(1) \nend \nif TimeSince(AnyoneCore.Data.lastUpdateCheck) > 900000 then \nAnyoneCore.log(\"15 minutes have elapsed, checking for a new update.\", 2)\nAnyoneCore.Data.lastUpdateCheck = Now()\nupdater(1)\nend\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					7,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "automatic update checker",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if AnyoneCore.Settings.ShotcallerLockPlacement == true and AnyoneCore.Data.ShotcallText ~= nil then\n    GUI:SetNextWindowSize(1000,1000,GUI.SetCond_Once)\n    GUI:PushStyleColor(GUI.Col_WindowBg, 0,0,0,0)\n    \n    GUI:Begin(\"AnyoneCore##Shotcaller\", AnyoneCore.Settings.Shotcaller, GUI.WindowFlags_NoTitleBar + GUI.WindowFlags_NoInputs + GUI.WindowFlags_NoMove + GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoScrollWithMouse + GUI.WindowFlags_NoCollapse + GUI.WindowFlags_NoFocusOnAppearing)\n    GUI:SetWindowFontSize(AnyoneCore.Settings.ShotcallerSize)\n    local width = GUI:GetContentRegionAvailWidth()\n    local height = GUI:GetTextLineHeightWithSpacing()\n    local str = AnyoneCore.Data.ShotcallText\n    local padding = ((width)-GUI:CalcTextSize(str))/2\n    local r,g,b,a\n    if AnyoneCore.Data.ShotcallImportant == true then         r = AnyoneCore.Settings.ShotcallerColor.important.r g = AnyoneCore.Settings.ShotcallerColor.important.g b = AnyoneCore.Settings.ShotcallerColor.important.b a = AnyoneCore.Settings.ShotcallerColor.important.a\n    else r = AnyoneCore.Settings.ShotcallerColor.normal.r g = AnyoneCore.Settings.ShotcallerColor.normal.g b = AnyoneCore.Settings.ShotcallerColor.normal.b a = AnyoneCore.Settings.ShotcallerColor.normal.a end \n\tGUI:Dummy(padding,height) GUI:SameLine(0,0) GUI:TextColored(r,g,b,a,str)\n    ---GUI:Text(AnyoneCore.Data.ShotcallText)\n    if TimeSince(AnyoneCore.Data.ShotcallTimerStart) >= (AnyoneCore.Data.ShotcallTimer*1000) then\n        AnyoneCore.Data.ShotcallText = nil\n        AnyoneCore.Data.ShotcallTimer = nil\n        AnyoneCore.Data.ShotcallText = nil\n        AnyoneCore.log(\"Hiding shotcaller text\", 1)\n    end\n    GUI:End()\n    GUI:PopStyleColor()\nelseif AnyoneCore.Settings.ShotcallerLockPlacement == false then\n    local str = \"Shotcaller is not locked. Lock it to make this go away.\"\n    GUI:SetNextWindowSize(200,200,GUI.SetCond_Once)\n    GUI:PushStyleColor(GUI.Col_WindowBg, 0,0,0,0)\n    GUI:Begin(\"AnyoneCore##Shotcaller\", AnyoneCore.Settings.Shotcaller, GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoScrollWithMouse + GUI.WindowFlags_NoCollapse + GUI.WindowFlags_NoFocusOnAppearing)\n    GUI:SetWindowFontSize(AnyoneCore.Settings.ShotcallerSize)\n    local width = GUI:GetContentRegionAvailWidth()\n    local height = GUI:GetTextLineHeightWithSpacing()\n    local padding = ((width)-GUI:CalcTextSize(str))/2\n    local r,g,b,a = AnyoneCore.Settings.ShotcallerColor.normal.r, AnyoneCore.Settings.ShotcallerColor.normal.g, AnyoneCore.Settings.ShotcallerColor.normal.b, AnyoneCore.Settings.ShotcallerColor.normal.a\n\tGUI:Dummy(padding,height) GUI:SameLine(0,0) GUI:TextColored(r,g,b,a,str)\n    ---GUI:Text(\"Shotcaller is not locked. Lock it to make this go away.\")\n    GUI:End()\n    GUI:PopStyleColor()\nend\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					8,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "shotcaller",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "function AnyoneCore.Toggle(type, boolean, timer)\n    local CurrentACR = gACRSelectedProfiles[Player.job]\n    local bool,clock\n    if boolean == \"on\" or boolean == \"true\" then boolean = true elseif boolean == \"off\" or boolean == \"false\" then boolean = false end\n    if boolean == true then bool = \"on\" else bool = \"off\" end\n    if boolean == nil or (boolean ~= true and boolean ~= false) then AnyoneCore.log(\"Incorrect syntax for function: 2nd argument should always be true, or false. example: 'AnyoneCore.Toggle(cd, false)'\", 1) do return end end\n    if string.valid(type) == false then AnyoneCore.log(\"Invalid syntax for function: Type must be a string. example: AnyoneCore.Toggle('cd', true, 15000)\") do return end end\n    if timer ~= nil then\n        if tonumber(timer) == nil then AnyoneCore.log(\"Incorrect syntax for function: 3rd argument should contain a valid number. example: 'AnyoneCore.Toggle(cd, false, 15000)'\") do return end end\n        if AnyoneCore.Data.ToggleTimer1 == nil then\n            AnyoneCore.Data.ToggleType1 = tostring(type) \n            AnyoneCore.Data.ToggleBoolean1 = not boolean\n            AnyoneCore.Data.ToggleTimer1 = timer \n            AnyoneCore.Data.ToggleTimerStart1 = Now()\n        elseif AnyoneCore.Data.ToggleTimer1 ~= nil and AnyoneCore.Data.ToggleTimer2 == nil then\n            AnyoneCore.Data.ToggleType2 = tostring(type) \n            AnyoneCore.Data.ToggleBoolean2 = not boolean\n            AnyoneCore.Data.ToggleTimer2 = timer \n            AnyoneCore.Data.ToggleTimerStart2 = Now()\n        elseif AnyoneCore.Data.ToggleTimer2 ~= nil and AnyoneCore.Data.ToggleTimer3 == nil then\n            AnyoneCore.Data.ToggleType3 = tostring(type) \n            AnyoneCore.Data.ToggleBoolean3 = not boolean\n            AnyoneCore.Data.ToggleTimer3 = timer \n            AnyoneCore.Data.ToggleTimerStart3 = Now()\n        elseif AnyoneCore.Data.ToggleTimer3 ~= nil and AnyoneCore.Data.ToggleTimer4 == nil then\n            AnyoneCore.Data.ToggleType4 = tostring(type) \n            AnyoneCore.Data.ToggleBoolean4 = not boolean\n            AnyoneCore.Data.ToggleTimer4 = timer \n            AnyoneCore.Data.ToggleTimerStart4 = Now()\n        elseif AnyoneCore.Data.ToggleTimer4 ~= nil and AnyoneCore.Data.ToggleTimer5 == nil then\n            AnyoneCore.Data.ToggleType5 = tostring(type) \n            AnyoneCore.Data.ToggleBoolean5 = not boolean\n            AnyoneCore.Data.ToggleTimer5 = timer \n            AnyoneCore.Data.ToggleTimerStart5 = Now()\n        elseif AnyoneCore.Data.ToggleTimer5 ~= nil and AnyoneCore.Data.ToggleTimer6 == nil then\n            AnyoneCore.Data.ToggleType6 = tostring(type) \n            AnyoneCore.Data.ToggleBoolean6 = not boolean\n            AnyoneCore.Data.ToggleTimer6 = timer \n            AnyoneCore.Data.ToggleTimerStart6 = Now()\n        elseif AnyoneCore.Data.ToggleTimer6 ~= nil then\n            AnyoneCore.log(\"This function can only support up to 6 simultaneous timers. Consider changing your toggles to basic versions.\")\n        end\n    end\n    if timer ~= nil then clock = tonumber(timer/1000) AnyoneCore.log(\"Toggling \"..tostring(type)..\" \"..bool..\" for \"..tostring(clock)..\" seconds.\") \n    else AnyoneCore.log(\"Toggling \"..tostring(type)..\" \"..bool) end\n    if Player.job == 22 then\n        if CurrentACR == \"RikuDRG\" then\n            if type == \"CD\" or type == \"cd\" then\n                ACR_RikuDRG_CD = boolean\n            end\n            if type == \"truenorth\" or type == \"TrueNorth\" then\n                ACR_RikuDRG_TrueNorth = boolean\n            end\n            if type == \"omni\" or type == \"Omni\" then\n                ACR_RikuDRG_Omni = boolean\n                ACR_RikuDRG_TrueNorth = boolean\n            end\n            if type == \"aoe\" or type == \"AOE\" or type == \"AoE\" then\n                ACR_RikuDRG_AOE = boolean\n            end\n            if type == \"burn\" or type == \"Burn\" or type == \"burnboss\" or type == \"BurnBoss\" then\n                ACR_RikuDRG_Burn = boolean\n            end\n            if type == \"jumps\" or type == \"Jumps\" then\n                ACR_RikuDRG_Jumps = boolean\n            end\n            if type == \"SetPots\" or type == \"setpots\" then\n                if ACR_RikuDRG_Potion == true then\n                    data.PotsEnabled = boolean\n                end\n            end\n            if type == \"pots\" or type == \"Pots\" or type == \"pot\" or type == \"Pot\" or type == \"potion\" or type == \"Potion\" then\n                if data.PotsEnabled == true then\n                    ACR_RikuDRG_Potion = boolean\n                end\n            end\n        elseif CurrentACR == \"SallyDRG\" then\n            if type == \"CD\" or type == \"cd\" then\n                if boolean == true then\n                    SallyDRG.SkillSettings.SaveCD.enabled = false\n                elseif boolean == false then\n                    SallyDRG.SkillSettings.SaveCD.enabled = true\n                end\n            end\n            if type == \"truenorth\" or type == \"TrueNorth\" then\n                SallyDRG.SkillSettings.TrueNorth.enabled = boolean\n            end\n            if type == \"omni\" or type == \"Omni\" then\n                SallyDRG.SkillSettings.Omni.enabled = boolean\n                SallyDRG.SkillSettings.TrueNorth.enabled = boolean\n            end\n            if type == \"aoe\" or type == \"AOE\" or type == \"AoE\" then\n                SallyDRG.SkillSettings.UseAOE.enabled = boolean\n            end\n            if type == \"burn\" or type == \"Burn\" or type == \"burnboss\" or type == \"BurnBoss\" then\n                SallyDRG.SkillSettings.BurnBoss.enabled = boolean\n            end\n            if type == \"jumps\" or type == \"Jumps\" then\n                SallyDRG.SkillSettings.Jumps.enabled = boolean\n            end\n            if type == \"SetPots\" or type == \"setpots\" then\n                if SallyDRG.SkillSettings.Potion.enabled == true then\n                    data.PotsEnabled = boolean\n                end\n            end\n            if type == \"pots\" or type == \"Pots\" or type == \"pot\" or type == \"Pot\" or type == \"potion\" or type == \"Potion\" then\n                if data.PotsEnabled == true then\n                    SallyDRG.SkillSettings.Potion.enabled = boolean\n                end\n            end\n        elseif CurrentACR == \"Sting\" then\n            if type == \"CD\" or type == \"cd\" then\n                ACR_StingSB_CDs = boolean\n            end\n            if type == \"truenorth\" or type == \"TrueNorth\" then\n                ACR_StingSB_TrueNorth = boolean\n            end\n            if type == \"omni\" or type == \"Omni\" then\n                ACR_StingSB_TrueNorth = boolean\n            end\n            if type == \"aoe\" or type == \"AOE\" or type == \"AoE\" then\n                ACR_StingSB_AOE = boolean\n            end\n            if type == \"burn\" or type == \"Burn\" or type == \"burnboss\" or type == \"BurnBoss\" then\n                ACR_StingSB_Destroy = boolean\n            end\n            if type == \"jumps\" or type == \"Jumps\" then\n                ACR_StingSB_Jumps = boolean\n            end\n            if type == \"pots\" or type == \"Pots\" or type == \"pot\" or type == \"Pot\" or type == \"potion\" or type == \"Potion\" then\n                if data.PotsEnabled == true then\n                    ACR_StingSB_Potion = boolean\n                end\n            end\n        end\n    elseif Player.job == 32 then\n        if CurrentACR == \"RikuDRK\" then\n            if type == \"CD\" or type == \"cd\" then\n                ACR_RikuDRK_CD = boolean\n                ACR_RikuDRK_SaltedEarth = boolean\n            elseif type == \"aoe\" or type == \"AOE\" or type == \"AoE\" then\n                ACR_RikuDRK_AOE = boolean\n            elseif type == \"jumps\" or type == \"Jumps\" then\n                ACR_RikuDRK_Jumps = boolean\n            elseif type == \"burn\" or type == \"Burn\" or type == \"burnboss\" or type == \"BurnBoss\" then\n                ACR_RikuDRK_Burn = boolean\n                ACR_RikuDRK_BurnPlunge = boolean\n            elseif type == \"hold\" or type == \"Hold\" or type == \"holdgauge\" or type == \"HoldGauge\" then\n                ACR_RikuDRK_HoldGauge = boolean\n            elseif type == \"carve\" or type == \"Carve\" or type == \"carveandspit\" or type == \"CarveAndSpit\" or type == \"CarveandSpit\" then\n                ACR_RikuDRK_CarveAndSpit = boolean\n            elseif type == \"mt\" or type == \"MT\" then\n                if boolean == true then\n                    ACR_RikuDRK_TankStance = \"mt\"\n                elseif boolean == false then\n                    ACR_RikuDRK_TankStance = \"ot\"\n                end\n            elseif type == \"ot\" or type == \"OT\" or type == \"offtank\" or type == \"OffTank\" then\n                if boolean == true then\n                    ACR_RikuDRK_TankStance = \"ot\"\n                elseif boolean == false then\n                    ACR_RikuDRK_TankStance = \"mt\"\n                end\n            elseif type == \"tankswap\" or type == \"TankSwap\" or type == \"Tankswap\" or type == \"swap\" or type == \"Swap\" then\n                if ACR_RikuDRK_TankStance == \"mt\" then\n                    ACR_RikuDRK_TankStance = \"ot\"\n                elseif ACR_RikuDRK_TankStance == \"ot\" then\n                    ACR_RikuDRK_TankStance = \"mt\"\n                end\n            elseif type == \"setstance\" or type == \"SetStance\" then\n                if ACR_RikuDRK_TankStance == \"mt\" then\n                    data.StanceEnabled = true\n                end\n            elseif type == \"SetPots\" or type == \"setpots\" then\n                if ACR_RikuDRK_Potion == true then\n                    data.PotsEnabled = boolean\n                end\n            elseif type == \"pots\" or type == \"Pots\" or type == \"pot\" or type == \"Pot\" or type == \"potion\" or type == \"Potion\" then\n                if data.PotsEnabled == true then\n                    ACR_RikuDRK_Potion = boolean\n                end\n            end\n        elseif CurrentACR == \"SallyDRK\" then\n            if type == \"CD\" or type == \"cd\" then\n                if boolean == true then\n                    SallyDRK.SkillSettings.SaveCD.enabled = false\n                elseif boolean == false then\n                    SallyDRK.SkillSettings.SaveCD.enabled = true\n                end\n                SallyDRK.SkillSettings.SaltedEarth.enabled = boolean\n            elseif type == \"aoe\" or type == \"AOE\" or type == \"AoE\" then\n                SallyDRK.SkillSettings.UseAOE.enabled = boolean\n            elseif type == \"jumps\" or type == \"Jumps\" then\n                SallyDRK.SkillSettings.Plunge.enabled = boolean\n            elseif type == \"burn\" or type == \"Burn\" or type == \"burnboss\" or type == \"BurnBoss\" then\n                SallyDRK.SkillSettings.BurnBoss.enabled = boolean\n            elseif type == \"hold\" or type == \"Hold\" or type == \"holdgauge\" or type == \"HoldGauge\" then\n                AnyoneCore.log(\"No alternative to holding Bloodspiller for SallyDRK\", 1)\n                SallyDRK.SkillSettings.LivingShadow.enabled = boolean\n            elseif type == \"carve\" or type == \"Carve\" or type == \"carveandspit\" or type == \"CarveAndSpit\" or type == \"CarveandSpit\" then\n                SallyDRK.SkillSettings.CarveAndSplit.enabled = boolean\n            elseif type == \"mt\" or type == \"MT\" then\n                SallyDRK.SkillSettings.TankStance.enabled = boolean\n            elseif type == \"ot\" or type == \"OT\" or type == \"offtank\" or type == \"OffTank\" then\n                SallyDRK.SkillSettings.TankStance.enabled = boolean\n            elseif type == \"tankswap\" or type == \"TankSwap\" or type == \"Tankswap\" or type == \"swap\" or type == \"Swap\" then\n                if SallyDRK.SkillSettings.TankStance.enabled == \"true\" then\n                    SallyDRK.SkillSettings.TankStance.enabled = \"false\"\n                elseif SallyDRK.SkillSettings.TankStance.enabled == \"false\" then\n                    SallyDRK.SkillSettings.TankStance.enabled = \"true\"\n                end\n            elseif type == \"setstance\" or type == \"SetStance\" then\n                if SallyDRK.SkillSettings.TankStance.enabled == \"true\" then\n                    data.StanceEnabled = true\n                end\n            elseif type == \"SetPots\" or type == \"setpots\" then\n                if SallyDRK.SkillSettings.Potion.enabled == true then\n                    data.PotsEnabled = boolean\n                end\n            elseif type == \"pots\" or type == \"Pots\" or type == \"pot\" or type == \"Pot\" or type == \"potion\" or type == \"Potion\" then\n                if data.PotsEnabled == true then\n                    SallyDRK.SkillSettings.Potion.enabled = boolean\n                end\n            end\n        elseif CurrentACR == \"Void\" then\n            if type == \"CD\" or type == \"cd\" then\n                ACR_VoidSB_CDs = boolean\n                ACR_VoidSB_SaltedEarth = boolean\n            end\n            if type == \"aoe\" or type == \"AOE\" or type == \"AoE\" then\n                ACR_VoidSB_AOE = boolean\n            end\n            if type == \"jumps\" or type == \"Jumps\" then\n                ACR_VoidSB_Plunge = boolean\n            end\n            if type == \"burn\" or type == \"Burn\" or type == \"burnboss\" or type == \"BurnBoss\" then\n                ACR_VoidSB_Destroy = boolean\n            end\n            if type == \"hold\" or type == \"Hold\" or type == \"holdgauge\" or type == \"HoldGauge\" then\n                AnyoneCore.log(\"Void does not have any alternatives to holding gauge.\")\n            end\n            if type == \"carve\" or type == \"Carve\" or type == \"carveandspit\" or type == \"CarveAndSpit\" or type == \"CarveandSpit\" then\n                ACR_VoidSB_CarveSpit = boolean\n            end\n            if type == \"mt\" or type == \"MT\" then\n                if boolean == true then\n                    ACR_VoidSB_Tank_MT = true\n                    ACR_VoidSB_Tank_OT = false\n                elseif boolean == false then\n                    ACR_VoidSB_Tank_MT = false\n                    ACR_VoidSB_Tank_OT = true\n                end\n            end\n            if type == \"ot\" or type == \"OT\" or type == \"offtank\" or type == \"OffTank\" then\n                if boolean == true then\n                    ACR_VoidSB_Tank_MT = false\n                    ACR_VoidSB_Tank_OT = true\n                elseif boolean == false then\n                    ACR_VoidSB_Tank_MT = true\n                    ACR_VoidSB_Tank_OT = false\n                end\n            end\n            if type == \"tankswap\" or type == \"TankSwap\" or type == \"Tankswap\" or type == \"swap\" or type == \"Swap\" then\n                if ACR_VoidSB_Tank_MT == \"true\" then\n                    ACR_VoidSB_Tank_MT = false\n                    ACR_VoidSB_Tank_OT = true\n                elseif ACR_VoidSB_Tank_MT == \"false\" then\n                    ACR_VoidSB_Tank_MT = true\n                    ACR_VoidSB_Tank_OT = false\n                end\n            end\n            if type == \"setstance\" or type == \"SetStance\" then\n                if ACR_VoidSB_Tank_MT == \"true\" then\n                    data.StanceEnabled = true\n                end\n            end\n            if type == \"SetPots\" or type == \"setpots\" then\n                if ACR_VoidSB_Pots == true then\n                    data.PotsEnabled = boolean\n                end\n            end\n            if type == \"pots\" or type == \"Pots\" or type == \"pot\" or type == \"Pot\" or type == \"potion\" or type == \"Potion\" then\n                if data.PotsEnabled == true then\n                    ACR_VoidSB_Pots = boolean\n                end\n            end\n        end\n    elseif Player.job == 30 then -- Ninja shit\n        if CurrentACR == \"RikuNIN\" then\n            if type == \"CD\" or type == \"cd\" then\n                ACR_RikuNIN_CD = boolean\n                ACR_RikuNIN_TrickAttack = boolean\n                ACR_RikuNIN_Bunshin = boolean\n            elseif type == \"tcj\" or type == \"TCJ\" then\n                ACR_RikuNIN_CD = boolean\n            elseif type == \"aoe\" or type == \"AOE\" or type == \"AoE\" then\n                ACR_RikuNIN_AOE = boolean\n            elseif type == \"jumps\" or type == \"Jumps\" then\n                ACR_RikuNIN_Assassinate = boolean\n            elseif type == \"burn\" or type == \"Burn\" or type == \"burnboss\" or type == \"BurnBoss\" then\n                ACR_RikuNIN_Burn = boolean\n                ACR_RikuNIN_BurnMudra = boolean\n            elseif type == \"hold\" or type == \"Hold\" or type == \"holdgauge\" or type == \"HoldGauge\" then\n                ACR_RikuNIN_HoldNinki = boolean\n            elseif type == \"SetPots\" or type == \"setpots\" then\n                if ACR_RikuNIN_Potion == true then\n                    data.PotsEnabled = boolean\n                end\n            elseif type == \"pots\" or type == \"Pots\" or type == \"pot\" or type == \"Pot\" or type == \"potion\" or type == \"Potion\" then\n                if data.PotsEnabled == true then\n                    ACR_RikuNIN_Potion = boolean\n                end\n            end\n        elseif CurrentACR == \"SallyNIN\" then\n            if type == \"CD\" or type == \"cd\" then\n                if boolean == true then\n                    SallyNIN.SkillSettings.SaveCD.enabled = false\n                elseif boolean == false then\n                    SallyNIN.SkillSettings.SaveCD.enabled = true\n                end\n                SallyNIN.SkillSettings.TrickAttack.enabled = boolean\n                if Player.level >= 80 then\n                    SallyNIN.SkillSettings.Bushin.enabled = boolean\n                end\n            elseif type == \"TCJ\" or type == \"tcj\" then\n                if boolean == true then\n                    SallyNIN.SkillSettings.SaveCD.enabled = false\n                elseif boolean == false then\n                    SallyNIN.SkillSettings.SaveCD.enabled = true\n                end\n            elseif type == \"aoe\" or type == \"AOE\" or type == \"AoE\" then\n                SallyNIN.SkillSettings.UseAOE.enabled = boolean\n            elseif type == \"jumps\" or type == \"Jumps\" then\n                SallyNIN.SkillSettings.Assassinate.enabled = boolean\n            elseif type == \"burn\" or type == \"Burn\" or type == \"burnboss\" or type == \"BurnBoss\" then\n                SallyNIN.SkillSettings.BurnBoss.enabled = boolean\n            elseif type == \"hold\" or type == \"Hold\" or type == \"holdgauge\" or type == \"HoldGauge\" then\n                SallyNIN.SkillSettings.Ninki.enabled = boolean\n            elseif type == \"SetPots\" or type == \"setpots\" then\n                if SallyNIN.SkillSettings.Potion.enabled == true then\n                    data.PotsEnabled = boolean\n                end\n            elseif type == \"pots\" or type == \"Pots\" or type == \"pot\" or type == \"Pot\" or type == \"potion\" or type == \"Potion\" then\n                if data.PotsEnabled == true then\n                    SallyNIN.SkillSettings.Potion.enabled = boolean\n                end\n            end\n        elseif CurrentACR == \"Haru\" then\n            if type == \"CD\" or type == \"cd\" then\n                ACR_HaruSB_CDs = boolean\n                ACR_HaruSB_CD60 = boolean\n            elseif type == \"aoe\" or type == \"AOE\" or type == \"AoE\" then\n                ACR_HaruSB_AOE = boolean\n            elseif type == \"jumps\" or type == \"Jumps\" then\n                ACR_HaruSB_Assassinate = boolean\n            elseif type == \"burn\" or type == \"Burn\" or type == \"burnboss\" or type == \"BurnBoss\" then\n                ACR_HaruSB_Destroy = boolean\n            elseif type == \"hold\" or type == \"Hold\" or type == \"holdgauge\" or type == \"HoldGauge\" then\n                ACR_HaruSB_HoldGauge = boolean\n            elseif type == \"SetPots\" or type == \"setpots\" then\n                if ACR_HaruSB_Pots == true then\n                    data.PotsEnabled = boolean\n                end\n            elseif type == \"pots\" or type == \"Pots\" or type == \"pot\" or type == \"Pot\" or type == \"potion\" or type == \"Potion\" then\n                if data.PotsEnabled == true then\n                    ACR_HaruSB_Pots = boolean\n                end\n            end\n        end\n    end\nend\nAnyoneCore.log(\"Successfully loaded global ACR support.\")\nAnyoneCore.Data.LoadMultiJob = false\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					9,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "global ACR support",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if AnyoneCore.Data.ToggleTimer1 ~= nil then \n    if TimeSince(AnyoneCore.Data.ToggleTimerStart1) >= AnyoneCore.Data.ToggleTimer1 then\n        AnyoneCore.Toggle(AnyoneCore.Data.ToggleType1, AnyoneCore.Data.ToggleBoolean1)\n        AnyoneCore.Data.ToggleTimerStart1 = nil\n        AnyoneCore.Data.ToggleTimer1 = nil\n        AnyoneCore.Data.ToggleType1 = nil\n        AnyoneCore.Data.ToggleBoolean1 = nil\n    end \nend\nif AnyoneCore.Data.ToggleTimer2 ~= nil then \n    if TimeSince(AnyoneCore.Data.ToggleTimerStart2) >= AnyoneCore.Data.ToggleTimer2 then\n        AnyoneCore.Toggle(AnyoneCore.Data.ToggleType2, AnyoneCore.Data.ToggleBoolean2)\n        AnyoneCore.Data.ToggleTimerStart2 = nil\n        AnyoneCore.Data.ToggleTimer2 = nil\n        AnyoneCore.Data.ToggleType2 = nil\n        AnyoneCore.Data.ToggleBoolean2 = nil\n    end \nend\nif AnyoneCore.Data.ToggleTimer3 ~= nil then \n    if TimeSince(AnyoneCore.Data.ToggleTimerStart3) >= AnyoneCore.Data.ToggleTimer3 then\n        AnyoneCore.Toggle(AnyoneCore.Data.ToggleType3, AnyoneCore.Data.ToggleBoolean3)\n        AnyoneCore.Data.ToggleTimerStart3 = nil\n        AnyoneCore.Data.ToggleTimer3 = nil\n        AnyoneCore.Data.ToggleType3 = nil\n        AnyoneCore.Data.ToggleBoolean3 = nil\n    end \nend\nif AnyoneCore.Data.ToggleTimer4 ~= nil then \n    if TimeSince(AnyoneCore.Data.ToggleTimerStart4) >= AnyoneCore.Data.ToggleTimer4 then\n        AnyoneCore.Toggle(AnyoneCore.Data.ToggleType4, AnyoneCore.Data.ToggleBoolean4)\n        AnyoneCore.Data.ToggleTimerStart4 = nil\n        AnyoneCore.Data.ToggleTimer4 = nil\n        AnyoneCore.Data.ToggleType4 = nil\n        AnyoneCore.Data.ToggleBoolean4 = nil\n    end \nend\nif AnyoneCore.Data.ToggleTimer5 ~= nil then \n    if TimeSince(AnyoneCore.Data.ToggleTimerStart5) >= AnyoneCore.Data.ToggleTimer5 then\n        AnyoneCore.Toggle(AnyoneCore.Data.ToggleType5, AnyoneCore.Data.ToggleBoolean5)\n        AnyoneCore.Data.ToggleTimerStart5 = nil\n        AnyoneCore.Data.ToggleTimer5 = nil\n        AnyoneCore.Data.ToggleType5 = nil\n        AnyoneCore.Data.ToggleBoolean5 = nil\n    end \nend\nif AnyoneCore.Data.ToggleTimer6 ~= nil then \n    if TimeSince(AnyoneCore.Data.ToggleTimerStart6) >= AnyoneCore.Data.ToggleTimer6 then\n        AnyoneCore.Toggle(AnyoneCore.Data.ToggleType6, AnyoneCore.Data.ToggleBoolean6)\n        AnyoneCore.Data.ToggleTimerStart6 = nil\n        AnyoneCore.Data.ToggleTimer6 = nil\n        AnyoneCore.Data.ToggleType6 = nil\n        AnyoneCore.Data.ToggleBoolean6 = nil\n    end \nend",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					10,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "toggle timer",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if AnyoneCore.Settings.DutyHelper == true or AnyoneCore.Settings.DutyHelper == false then AnyoneCore.Settings.DutyHelper = {} end\nif AnyoneCore.Settings.DutyHelper[Player.job] == nil then \n    table.insert(AnyoneCore.Settings.DutyHelper, Player.job,{mitigation = true, targeting = true, interrupt = true, knockback = true, grabaggro = true}) \n    AnyoneCore.save(true)\nend\nif AnyoneCore.Settings.DutyHelper.enabled == nil then AnyoneCore.Settings.DutyHelper.enabled = false AnyoneCore.save(true) end\n\nif AnyoneCore.Settings.PrepullHelper == true or AnyoneCore.Settings.PrepullHelper == false then AnyoneCore.Settings.PrepullHelper = {} end\nif AnyoneCore.Settings.PrepullHelper[Player.job] == nil then \n    table.insert(AnyoneCore.Settings.PrepullHelper, Player.job,{ enabled = true, sprint = true, peloton = true, divineveil = true, backflip = true, placepet = true, aetherpact = true, badteamdelay = 300, doton = false, level70nin = false }) \n    AnyoneCore.save(true)\nend\nreaction.eventConditionMismatch = true\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "generate job settings",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if data.countdownDuration ~= nil and data.countdownTime ~= nil then\n    local timer = data.countdownDuration - TimeSince(data.countdownTime) / 1000\n    if timer > 0.01 and timer < 30 then\n        if AnyoneCore.Settings.SimpleCountdown == true then\n            GUI:SetNextWindowSize(10,10,GUI.SetCond_Once)\n            GUI:Begin(\"AnyoneCore##AccurateCountdownTimer\", AnyoneCore.Settings.AccurateCountdownTimer,GUI.WindowFlags_NoTitleBar + GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoScrollWithMouse + GUI.WindowFlags_NoCollapse)\n            GUI:Text(timer)\n            GUI:End()\n        else\n            GUI:PushStyleColor(GUI.Col_WindowBg, 0,0,0,0)\n            GUI:PushStyleColor(GUI.Col_Text,1,1,1,1)\n            GUI:PushStyleColor(GUI.Col_PlotHistogram,0.1,0.1,0.1,1)\n            GUI:Begin(\"AnyoneCore##AccurateCountdownTimer\", AnyoneCore.Settings.AccurateCountdownTimer,GUI.WindowFlags_NoTitleBar + GUI.WindowFlags_AlwaysAutoResize + GUI.WindowFlags_NoScrollbar + GUI.WindowFlags_NoScrollWithMouse + GUI.WindowFlags_NoCollapse)\n\t\t\tlocal max,time = data.countdownDuration,TimeSince(data.countdownTime)/1000\n            local progress = (function() if time <= max then return time / max elseif time > max then return 1 end end)()\n            GUI:SetWindowFontSize(1.25)\n            GUI:Dummy() GUI:SameLine(0,0)\n            GUI:ProgressBar( progress, 90, 25, math.round(timer, 2))\n            GUI:SameLine(0,0)\n            GUI:End()\n            GUI:PopStyleColor(3)\n        end\n    end\nend\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					12,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "accurate countdown timer",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return not gAnyoneCoreInitialize",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Not Initialized",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Data.UpdateTick ~= nil and AnyoneCore.Data.Loaded == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Confirm Update Status",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.enabled == true and AnyoneCore.open == true and AnyoneCore.Data.Loaded == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "main",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Data.Loaded == true and AnyoneCore.Settings.MiniReactionsTimer == true and TensorReactions_CurrentTimer ~= 0",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "mini reaction timer",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Settings.SongEntityCount == true and Player.job == 23 and AnyoneCore.Data.Loaded == true and Player.incombat == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "entity song counter",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Settings.FaceAwayEnabler == true and FaceAway ~= nil and AnyoneCore.Data.Loaded == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "face away helper",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Settings.WarnForUpdate == true and (AnyoneCore.Data.lastUpdateCheck == nil or TimeSince(AnyoneCore.Data.lastUpdateCheck) > 900000) and AnyoneCore.Data.Loaded == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "automatic update checker",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Settings.Shotcaller == true and (AnyoneCore.Data.ShotcallText ~= nil or AnyoneCore.Settings.ShotcallerLockPlacement == false) and AnyoneCore.Data.Loaded == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "shotcaller",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Data.Loaded == true and AnyoneCore.Data.LoadMultiJob == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "global ACR support",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Data.Loaded == true and (AnyoneCore.Data.ToggleTimer1 ~= nil or AnyoneCore.Data.ToggleTimer2 ~= nil or AnyoneCore.Data.ToggleTimer3 ~= nil or AnyoneCore.Data.ToggleTimer4 ~= nil or AnyoneCore.Data.ToggleTimer5 ~= nil or AnyoneCore.Data.ToggleTimer6 ~= nil)",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "toggle timer",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore.Settings.DutyHelper[Player.job] == nil or AnyoneCore.Settings.PrepullHelper[Player.job] == nil or AnyoneCore.Settings.DutyHelper == true or AnyoneCore.Settings.DutyHelper == false or AnyoneCore.Settings.PrepullHelper == true or AnyoneCore.Settings.PrepullHelper == false or AnyoneCore.Settings.DutyHelper.enabled == nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "gen settings",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Data.Loaded == true and AnyoneCore.Settings.AccurateCountdownTimer == true and data.countdownDuration ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "accurate countdown timer",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 13,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "AnyoneCore",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "d0d3bd3e-a097-42f9-a311-c1b920a76ef2",
	},
	
	{
		actions = 
		{
		},
		conditions = 
		{
		},
		enabled = false,
		eventType = 1,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "         -RESETS-",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "fccac419-3418-e879-b90a-01f67509e931",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "ACR_TensorWeeb_Hotbar_ArmsLength = false\nACR_TensorWeeb_Hotbar_SecondWind = false\nACR_TensorWeeb_Hotbar_Gyoten = false\nACR_TensorWeeb_Hotbar_Yaten = false\nACR_TensorWeeb_Hotbar_ThirdEye = false\nACR_TensorWeeb_Hotbar_Feint = false\nACR_TensorWeeb_Hotbar_Potion = false\nACR_TensorWeeb_Hotbar_Sprint = false\nACR_TensorWeeb_Hotbar_LegSweep = false\nACR_TensorWeeb_Hotbar_Bloodbath = false\nACR_TensorWeeb_Hotbar_LimitBreak = false\nACR_TensorWeeb_Hotbar_LockFace = false\n\nACR_TensorWeeb_CD = true\nACR_TensorWeeb_AOE = false\nACR_TensorWeeb_SmartAOE = false\nACR_TensorWeeb_DoTs = true \nACR_TensorWeeb_BurnKenki = false\nACR_TensorWeeb_HoldKenki = false\nACR_TensorWeeb_HoldSen = false\nACR_TensorWeeb_ThirdEye = true\nACR_TensorWeeb_Fillers = true\nACR_TensorWeeb_TrueNorth = true\nACR_TensorWeeb_MeikyoShisui = true\nACR_TensorWeeb_Senei = true\nACR_TensorWeeb_Jumps = true \nACR_TensorWeeb_Omni = false\n\nPlayer:ClearTarget()\n\nJobCheck()\n\nif eventArgs.oldData.PotsEnabled ~= nil or AnyoneCore.Settings.PotionOverride == true then\nACR_TensorWeeb_Potion = true\nend\nself.used = true\n\n",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "SallySAM.HotBarConfig.Armslength.enabled = true\nSallySAM.HotBarConfig.Bloodbath.enabled = true\nSallySAM.HotBarConfig.Feint.enabled = true\nSallySAM.HotBarConfig.Gyoten.enabled = true\nSallySAM.HotBarConfig.Hagakure.enabled = true\nSallySAM.HotBarConfig.Kaiten.enabled = true\nSallySAM.HotBarConfig.LB.enabled = true\nSallySAM.HotBarConfig.LegSweep.enabled = true\nSallySAM.HotBarConfig.Meditate.enabled = true\nSallySAM.HotBarConfig.Meikyo.enabled = true\nSallySAM.HotBarConfig.Potion.enabled = true\nSallySAM.HotBarConfig.SecondWind.enabled = true\nSallySAM.HotBarConfig.Sprint.enabled = true\nSallySAM.HotBarConfig.ThirdEye.enabled = true\nSallySAM.HotBarConfig.TrueNorth.enabled = true\nSallySAM.HotBarConfig.Yaten.enabled = true\n\nif AnyoneCore.Settings.NeverEnpi == false then\nSallySAM.SkillSettings.Enpi.enabled = false\nend\nSallySAM.SkillSettings.Guren.enabled = true\nSallySAM.SkillSettings.Hagakure.enabled = true\nSallySAM.SkillSettings.Higanbana.enabled = true\nSallySAM.SkillSettings.Ikishoten.enabled = true\nSallySAM.SkillSettings.Kaiten.enabled = true\nSallySAM.SkillSettings.Kyuten.enabled = true\nSallySAM.SkillSettings.Meikyo.enabled = true\nSallySAM.SkillSettings.Omni.enabled = false\nSallySAM.SkillSettings.Opener.enabled = true\nSallySAM.resetOpener()\nSallySAM.SkillSettings.SaveCD.enabled = false\nSallySAM.SkillSettings.Senei.enabled = true\nSallySAM.SkillSettings.Shinten.enabled = true\nSallySAM.SkillSettings.Shoha.enabled = true\nSallySAM.SkillSettings.SmartTrueNorth.enabled = true\nSallySAM.SkillSettings.Tsubame.enabled = true\nSallySAM.SkillSettings.UseAOE.enabled = true\n\nJobCheck()\n\nif eventArgs.oldData.PotsEnabled ~= nil or AnyoneCore.Settings.PotionOverride == true then\nSallySAM.SkillSettings.Potion.enabled = true\nend\nself.used = true\n\n",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return gACRSelectedProfiles[Player.job] == \"TensorWeeb\" \n",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return gACRSelectedProfiles[Player.job] == \"SallySAM\" \n",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 9,
		execute = "SallySAM.HotBarConfig.Armslength.enabled = true\nSallySAM.HotBarConfig.Bloodbath.enabled = true\nSallySAM.HotBarConfig.Feint.enabled = true\nSallySAM.HotBarConfig.Gyoten.enabled = true\nSallySAM.HotBarConfig.Hagakure.enabled = true\nSallySAM.HotBarConfig.Kaiten.enabled = true\nSallySAM.HotBarConfig.LB.enabled = true\nSallySAM.HotBarConfig.LegSweep.enabled = true\nSallySAM.HotBarConfig.Meditate.enabled = true\nSallySAM.HotBarConfig.Meikyo.enabled = true\nSallySAM.HotBarConfig.Potion.enabled = true\nSallySAM.HotBarConfig.SecondWind.enabled = true\nSallySAM.HotBarConfig.Sprint.enabled = true\nSallySAM.HotBarConfig.ThirdEye.enabled = true\nSallySAM.HotBarConfig.TrueNorth.enabled = true\nSallySAM.HotBarConfig.Yaten.enabled = true\n\nif AnyoneCore.Settings.NeverEnpi == false then\nSallySAM.SkillSettings.Enpi.enabled = false\nend\nSallySAM.SkillSettings.Guren.enabled = true\nSallySAM.SkillSettings.Hagakure.enabled = true\nSallySAM.SkillSettings.Higanbana.enabled = true\nSallySAM.SkillSettings.Ikishoten.enabled = true\nSallySAM.SkillSettings.Kaiten.enabled = true\nSallySAM.SkillSettings.Kyuten.enabled = true\nSallySAM.SkillSettings.Meikyo.enabled = true\nSallySAM.SkillSettings.Omni.enabled = false\nSallySAM.SkillSettings.Opener.enabled = true\nSallySAM.resetOpener()\nSallySAM.SkillSettings.SaveCD.enabled = false\nSallySAM.SkillSettings.Senei.enabled = true\nSallySAM.SkillSettings.Shinten.enabled = true\nSallySAM.SkillSettings.Shoha.enabled = true\nSallySAM.SkillSettings.SmartTrueNorth.enabled = true\nSallySAM.SkillSettings.Tsubame.enabled = true\nSallySAM.SkillSettings.UseAOE.enabled = true\n\nif eventArgs.oldData.PotsEnabled ~= nil then\nSallySAM.SkillSettings.Potion.enabled = true\nend\nself.used = true\n\n",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Reset Hotbars/QT on Wipe",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "988f24bc-c22b-a456-b8df-eb36ab571ec2",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "ACR_TensorWeeb_Hotbar_ArmsLength = false\nACR_TensorWeeb_Hotbar_SecondWind = false\nACR_TensorWeeb_Hotbar_Gyoten = false\nACR_TensorWeeb_Hotbar_Yaten = false\nACR_TensorWeeb_Hotbar_ThirdEye = false\nACR_TensorWeeb_Hotbar_Feint = false\nACR_TensorWeeb_Hotbar_Potion = false\nACR_TensorWeeb_Hotbar_Sprint = false\nACR_TensorWeeb_Hotbar_LegSweep = false\nACR_TensorWeeb_Hotbar_Bloodbath = false\nACR_TensorWeeb_Hotbar_LimitBreak = false\nACR_TensorWeeb_Hotbar_LockFace = false\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					3,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "SallySAM.HotBarConfig.Armslength.enabled = true\nSallySAM.HotBarConfig.Bloodbath.enabled = true\nSallySAM.HotBarConfig.Feint.enabled = true\nSallySAM.HotBarConfig.Gyoten.enabled = true\nSallySAM.HotBarConfig.Hagakure.enabled = true\nSallySAM.HotBarConfig.Kaiten.enabled = true\nSallySAM.HotBarConfig.LB.enabled = true\nSallySAM.HotBarConfig.LegSweep.enabled = true\nSallySAM.HotBarConfig.Meditate.enabled = true\nSallySAM.HotBarConfig.Meikyo.enabled = true\nSallySAM.HotBarConfig.Potion.enabled = true\nSallySAM.HotBarConfig.SecondWind.enabled = true\nSallySAM.HotBarConfig.Sprint.enabled = true\nSallySAM.HotBarConfig.ThirdEye.enabled = true\nSallySAM.HotBarConfig.TrueNorth.enabled = true\nSallySAM.HotBarConfig.Yaten.enabled = true\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					3,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return gACRSelectedProfiles[Player.job] == \"TensorWeeb\" \n",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return gACRSelectedProfiles[Player.job] == \"SallySAM\" \n",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return Player.revivestate ~= 0",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 1,
		execute = "SallySAM.HotBarConfig.Armslength.enabled = true\nSallySAM.HotBarConfig.Bloodbath.enabled = true\nSallySAM.HotBarConfig.Feint.enabled = true\nSallySAM.HotBarConfig.Gyoten.enabled = true\nSallySAM.HotBarConfig.Hagakure.enabled = true\nSallySAM.HotBarConfig.Kaiten.enabled = true\nSallySAM.HotBarConfig.LB.enabled = true\nSallySAM.HotBarConfig.LegSweep.enabled = true\nSallySAM.HotBarConfig.Meditate.enabled = true\nSallySAM.HotBarConfig.Meikyo.enabled = true\nSallySAM.HotBarConfig.Potion.enabled = true\nSallySAM.HotBarConfig.SecondWind.enabled = true\nSallySAM.HotBarConfig.Sprint.enabled = true\nSallySAM.HotBarConfig.ThirdEye.enabled = true\nSallySAM.HotBarConfig.TrueNorth.enabled = true\nSallySAM.HotBarConfig.Yaten.enabled = true\nself.used = true",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Reset Hotbars On Death",
		randomOffset = 0,
		throttleTime = 1000,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "cc74ea10-a699-6b85-aad2-b42ee8108e5b",
	},
	
	{
		actions = 
		{
		},
		conditions = 
		{
		},
		enabled = false,
		eventType = 1,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "          -MISC-",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "c6dd6f01-360f-7e4b-8b4e-0e643f7bef43",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "---dont use xivopeners lol. turn on midare first for e8s if you're 2.0 gcd, turn on cursed opener for e8s if you're 2.14 gcd\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					3,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Player.localmapid == 906 and Player.job == 34 and gACRSelectedProfiles[Player.job] == \"SallySAM\" then\n SallySAM.openerInfo.index = 2\n SallySAM.openerInfo.idex = 2\n self.used = true\nend\n\nif Player.localmapid == 907 and Player.job == 34 and gACRSelectedProfiles[Player.job] == \"SallySAM\" then\n SallySAM.openerInfo.index = 1\n SallySAM.openerInfo.idex = 1\n self.used = true\nend\n\nif Player.localmapid == 908 and Player.job == 34 and gACRSelectedProfiles[Player.job] == \"SallySAM\" then\n SallySAM.openerInfo.index = 2\n SallySAM.openerInfo.idex = 2\n self.used = true\nend\n\nif Player.localmapid == 909 and Player.job == 34 and gACRSelectedProfiles[Player.job] == \"SallySAM\" then\n SallySAM.openerInfo.index = 2\n SallySAM.openerInfo.idex = 2\n self.used = true\nend\nself.used = true\nself.eventConditionMismatch = true\n",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					3,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return gACRSelectedProfiles[Player.job] == \"TensorWeeb\" \n",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return gACRSelectedProfiles[Player.job] == \"SallySAM\" \n",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return Player.localmapid == 906 or Player.localmapid == 907 or Player.localmapid == 908 or Player.localmapid == 909 and Player.job == 34",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 11,
		execute = "local selectedACR = gACRSelectedProfiles[Player.job]\nif Player.localmapid == 906 and Player.job == 34 and selectedACR == \"SallySAM\" then\n SallySAM.openerInfo.index = 2\n SallySAM.openerInfo.idex = 2\n self.used = true\nend\n\nif Player.localmapid == 907 and Player.job == 34 and selectedACR == \"SallySAM\" then\n SallySAM.openerInfo.index = 1\n SallySAM.openerInfo.idex = 1\n self.used = true\nend\n\nif Player.localmapid == 908 and Player.job == 34 and selectedACR == \"SallySAM\" then\n SallySAM.openerInfo.index = 2\n SallySAM.openerInfo.idex = 2\n self.used = true\nend\n\nif Player.localmapid == 909 and Player.job == 34 and selectedACR == \"SallySAM\" then\n SallySAM.openerInfo.index = 2\n SallySAM.openerInfo.idex = 2\n self.used = true\nend\nself.used = true\nself.eventConditionMismatch = true\n",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Change Opener Based On Zone",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "589f5e30-520f-3986-b8f7-fc7927c74492",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "JobCheck()\nself.used = true\nreaction.eventConditionMismatch = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and InInstance() == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 11,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "job check",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "ba956efa-f90d-ad6f-a42b-8d1aab029369",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local target = Player:GetTarget()\n\nif target then\n    Argus.addRectFilled(\n        Player.pos.x,\n        Player.pos.y,\n        Player.pos.z,\n        10,\n        0.01,\n        TensorCore.getHeadingToTarget(target.pos, Player.pos),\n        GUI:ColorConvertFloat4ToU32(200, 200, 0, 0.2),\n    \t\tGUI:ColorConvertFloat4ToU32(200, 200, 0, 1),\n        1.5\n    )\n    \n    local projectedPos = TensorCore.getPosInDirection(Player.pos, TensorCore.getHeadingToTarget(target.pos, Player.pos), 10)\n    Argus.addCircleFilled(\n        projectedPos.x,\n        projectedPos.y,\n        projectedPos.z,\n        0.5,\n        30,\n        GUI:ColorConvertFloat4ToU32(255, 0, 0, 0.5),\n        GUI:ColorConvertFloat4ToU32(100, 100, 0.5, 1),\n        1.5\n    )\nend\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
					4,
					5,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and Argus ~= nil and (AnyoneCore.Settings.DrawYaten == true)",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return (gACRSelectedProfiles[Player.job] == \"TensorWeeb\" and (ACR_TensorWeeb_Hotbar_Yaten == true or ACR_TensorWeeb_Hotbar_SafeYaten == true)) or (gACRSelectedProfiles[Player.job] == \"SallySAM\" and (SallySAM.HotBarConfig.Yaten.enabled == false))",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return Player:GetTarget() ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 1,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 2,
				conditionLua = "",
				conditionType = 6,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 5,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 12,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "draw yaten",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "926850bc-9028-35eb-a882-3018829bf151",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local target = EntityList:Get(eventArgs.entityID)\nFaceAway.Entity = target\nif target.type == 2 then\nPlayer:SetTarget(eventArgs.entityID)\nend\nFaceAway.FaceAway = true\nif AnyoneCore.Settings.DrawFaceAwayNoReactions == true then\ndata.dontdrawreactionsfacing = true\nend\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "look away",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "FaceAway.FaceAway = false\nFaceAway.Entity = nil\ndata.dontdrawreactionsfacing = nil\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
				},
				endIfUsed = true,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "dequeue",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 3,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0.25,
				channelCheckType = 3,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 2,
				conditionLua = "local spellCheck = {\n[343] = true, -- Doomsay\n[352] = true, -- Chaotic Eye\n[410] = true, -- Stone Gaze\n[498] = true, -- Cold Gaze\n[499] = true, -- Stone Gaze\n[512] = true, -- Cursed Gaze\n[513] = true, -- Dread Gaze\n[743] = true, -- Mudslinger\n[1161] = true, -- Stone Gaze\n[1969] = true, -- Petrifaction\n[1979] = true, -- Petrifaction\n[2410] = true, -- Level X Petrify\n[2516] = true, -- Petrifaction\n[2526] = true, -- Petrifaction\n[2734] = true, -- Stone Gaze\n[2824] = true, -- Petrifaction\n[2832] = true, -- Mortal Ray\n[3027] = true, -- Calcifying Mist\n[3173] = true, -- Entrance\n[3281] = true, -- Mortal Gaze\n[4201] = true, -- the Dragon's Gaze\n[4331] = true, -- Petrifaction\n[4492] = true, -- Quarry Lake\n[4493] = true, -- Naked Soul\n[4522] = true, -- Paradise Lost\n[4528] = true, -- Hypnotize\n[4537] = true, -- Headlight\n[4554] = true, -- Headwind\n[4666] = true, -- Calcifying Mist\n[4682] = true, -- Evil Eye\n[5028] = true, -- Petrifaction\n[5041] = true, -- Evil Eye\n[5140] = true, -- Stone Gaze\n[5154] = true, -- Petrifaction\n[5216] = true, -- Frond Fatale\n[5257] = true, -- the Dragon's Gaze\n[5366] = true, -- Foregone Gleam\n[5374] = true, -- Petrifaction\n[5431] = true, -- Petrifaction\n[5788] = true, -- Oogle\n[5832] = true, -- Mysterious Light\n[6100] = true, -- Mortal Ray\n[6146] = true, -- Assimilation\n[6202] = true, -- Frond Affeared\n[6351] = true, -- Stone Gaze\n[6356] = true, -- Stone Gaze\n[6379] = true, -- Quarry Lake\n[6403] = true, -- Cold Feet\n[6444] = true, -- Eye of the Stunted\n[6445] = true, -- Eye of the Wildered\n[6446] = true, -- Eye of the Slithered\n[6521] = true, -- Divine Spark\n[6582] = true, -- Divine Spark\n[6939] = true, -- Hypnotize\n[6953] = true, -- Mysterious Light\n[6957] = true, -- Foregone Gleam\n[7034] = true, -- Eye of the Stunted\n[7043] = true, -- Evil Eye\n[7182] = true, -- Nightmare\n[7200] = true, -- Hollow Nightmare\n[7270] = true, -- Meracydian Fear\n[7364] = true, -- Flash Powder\n[7651] = true, -- Eyeshine\n[7672] = true, -- Petrifying Eye\n[7675] = true, -- Evil Eye\n[7734] = true, -- Meracydian Fear\n[7779] = true, -- Petrifying Eye\n[7940] = true, -- Empty Gaze\n[7949] = true, -- Eye of the Fierce\n[8066] = true, -- Mad Stare\n[8194] = true, -- Nightmarish Light\n[8648] = true, -- Foregone Gleam\n[8717] = true, -- Inner Demons\n[8952] = true, -- Squelch\n[9030] = true, -- Overlong Glance\n[9071] = true, -- Death's Gaze\n[9165] = true, -- Eyeshine\n[9485] = true, -- Demon Eye\n[9542] = true, -- Frond Affeared\n[9557] = true, -- Eyeshine\n[9613] = true, -- Inner Demons\n[9649] = true, -- Petrifaction\n[9829] = true, -- Eye of the Fire\n[10274] = true, -- Divine Lure\n[10275] = true, -- Divine Lure\n[10679] = true, -- Absolute Terror\n[10769] = true, -- Petrifying Eye\n[10852] = true, -- Double Hex Eye\n[10956] = true, -- Explosive Dehiscence\n[11159] = true, -- Wile of the Tengu\n[11602] = true, -- Cerulean Ray\n[11608] = true, -- Mortal Ray\n[11645] = true, -- Mortal Gaze\n[11671] = true, -- Hex Eye\n[11750] = true, -- Quarry Lake\n[11752] = true, -- Hypnotize\n[11789] = true, -- Stone Gaze\n[11900] = true, -- Neuro Squama\n[11922] = true, -- Eye of the Fire\n[11973] = true, -- Stone Gaze\n[12174] = true, -- Blinding Burst\n[12190] = true, -- Wile of the Tengu\n[12261] = true, -- Eyeshine\n[12281] = true, -- Allagan Fear\n[12322] = true, -- Nightmarish Light\n[12357] = true, -- Shifting Light\n[12397] = true, -- Calcifying Mist\n[12416] = true, -- Frond Fatale\n[12442] = true, -- Hex\n[12513] = true, -- Petrifying Eye\n[12528] = true, -- Eye of the Slithered\n[12529] = true, -- Cold Stare\n[12553] = true, -- Naked Soul\n[12563] = true, -- Mysterious Light\n[12587] = true, -- Empty Gaze\n[12708] = true, -- Frond Fatale\n[13257] = true, -- Eyes of Anguish\n[13263] = true, -- Eye of the Fire\n[13296] = true, -- Evil Eye\n[13299] = true, -- Evil Eye\n[13368] = true, -- Hypnotize\n[13410] = true, -- Erratic Blaster\n[13552] = true, -- Imp Choir\n[13712] = true, -- Dread Gaze\n[13784] = true, -- Frond Affeared\n[14200] = true, -- Devitalize\n[14691] = true, -- Demon Eye\n[14692] = true, -- Cold Stare\n[14694] = true, -- Dread Gaze\n[14875] = true, -- Cry of Rage\n[14951] = true, -- Dark Sabbath\n[15030] = true, -- Chilling Glare\n[15078] = true, -- Explosive Dehiscence\n[15272] = true, -- Eye of the Fierce\n[15381] = true, -- Dread Gaze\n[15455] = true, -- Cold Gaze\n[15457] = true, -- Stone Gaze\n[15469] = true, -- Petrifaction\n[15475] = true, -- Petrifaction\n[15477] = true, -- Wile of the Tengu\n[16025] = true, -- Enthrall\n[16976] = true, -- Headlight\n[17198] = true, -- Charming Chasse\n[17360] = true, -- Coin Toss\n[17540] = true, -- Quarry Lake\n[17856] = true, -- Petro Eyes\n[17955] = true, -- Terrifying Glance\n[17973] = true, -- Cold Gaze\n[18017] = true, -- Stone Gaze\n[18041] = true, -- Petrifying Eye\n[18818] = true, -- Dread Gaze\n[19198] = true, -- Negative Aura\n[19995] = true, -- ネガティブオーラ\n[20001] = true, -- Crushing Gaze\n}\n\nlocal caster = EntityList:Get(eventArgs.entityID)\nreturn spellCheck[eventArgs.spellID] == true and caster and caster.castinginfo.casttime - caster.castinginfo.channeltime <= 0.75",
				conditionType = 5,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "channel time check",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "Event Entity",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.FaceAwayID[eventArgs.spellID] == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "dequeue check",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and FaceAway ~= nil and AnyoneCore.Settings.FaceAwayEnabler == true and AnyoneCore.Settings.UseFaceAwayReactions == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "settings check",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 3,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Face Away channels",
		randomOffset = 0,
		throttleTime = 400,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 10,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "a667f6ac-ce31-da11-b062-3bcf37cf7823",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local t = Player:GetTarget()\nif t then\nlocal radius = t.Distance+2\nArgus.addCircleFilled(t.pos.x, t.pos.y, t.pos.z, 0.1, 10, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), GUI:ColorConvertFloat4ToU32(0, 0, 0, 0), 0.1)\nArgus.addConeFilled(Player.pos.x, Player.pos.y, Player.pos.z, radius, math.rad(90), Player.pos.h, 30, GUI:ColorConvertFloat4ToU32(1, 0, 0, 0.1), GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 2)\nArgus.addConeFilled(Player.pos.x, Player.pos.y, Player.pos.z, radius, math.rad(30), Player.pos.h+math.rad(60), 30, GUI:ColorConvertFloat4ToU32(0, 1, 0, 0.1), GUI:ColorConvertFloat4ToU32(0, 1, 0, 1), 2)\nArgus.addConeFilled(Player.pos.x, Player.pos.y, Player.pos.z, radius, math.rad(30), Player.pos.h-math.rad(60), 30, GUI:ColorConvertFloat4ToU32(0, 1, 0, 0.1), GUI:ColorConvertFloat4ToU32(0, 1, 0, 1), 2)\nend\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return Argus ~= nil and AnyoneCore ~= nil and FaceAway ~= nil and (FaceAway.FaceAway == true or FaceAway.FaceAwayKey == true or FaceAway.drawcall ~= nil and AnyoneCore ~= nil) and (AnyoneCore.Settings.FaceAwayEnabler == true and AnyoneCore.Settings.DrawFaceAway == true) and (data.dontdrawreactionsfacing == nil)",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 12,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Draw Face Away",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "9b04ce88-5cc1-3b32-9366-06d336523e1e",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local helperVersion = 1.0\nlocal CountdownStartEnglish = \"Battle commencing in (%d+) seconds!\\n\"\nlocal CountdownStartChina = \"距离战斗开始还有(%d+)秒！\\n\"\nlocal CountdownStartFrench = \"Début du combat dans (%d+) secondes!\\n\"\nlocal CountdownStartGerman = \"Noch (%d+) Sekunden bis Kampfbeginn!\\n\"\nlocal CountdownStartJapanese = \"戦闘開始(%d+)秒！\\n\" \nlocal CountdownStartKorean = \"전투 시작 (%d+)초 전!\"\nlocal line = eventArgs.line.line\nlocal time\nif line:match(CountdownStartEnglish) then\n\t\ttime = line:match(CountdownStartEnglish)\nelseif line:match(CountdownStartFrench) then\n\t\ttime = line:match(CountdownStartFrench)\nelseif line:match(CountdownStartChina) then\n\t\ttime = line:match(CountdownStartChina)\nelseif line:match(CountdownStartGerman) then\n\t\ttime = line:match(CountdownStartGerman)\nelseif line:match(CountdownStartJapanese) then\n\t\ttime = line:match(CountdownStartJapanese)\nelseif line:match(CountdownStartKorean) then\n\t\ttime = line:match(CountdownStartKorean)\nend\n\nif time ~= nil then\n\t\t\t\tdata.countdownTime = Now()\n\t\t\t\tdata.countdownDuration = tonumber(time)\n\t\t\t\tdata.randomDelay = math.random(0, 2500)\nend\n\nJobCheck(3)\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "record countdown time",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if gStartCombat == false and data.startCombat == nil then\ndata.startCombat = true\nelse\ngStartCombat = false\nend\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					1,
					6,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "disable start combat",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "SallySAM.SkillSettings.Opener.enabled = true\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					1,
					5,
					7,
					9,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 1,
				actionID = 3,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					1,
					5,
					8,
					10,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = true,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "gStartCombat = true\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					1,
					3,
					5,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "enable start combat",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 3,
				actionID = -1,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					1,
					3,
					5,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "target nearest",
				potType = 1,
				setTarget = true,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Enemy",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if data.startCombat ~= nil then\ngStartCombat = false\ndata.startCombat = nil\nend\ndata.countdownTime = nil\ndata.countdownDuration = nil\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					4,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "dequeue if expired",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if data.countdownCanceled == true or (data.countdownTime ~= nil and data.countdownDuration ~= nil and data.countdownDuration * 1000 - TimeSince(data.countdownTime) <= 0) then\n    data.countdownCanceled = nil\n\t\t\t\tPlayer:ClearTarget()\n\t\t\t\tif data.startCombat == nil then\n    \t\tgStartCombat = true\n\t\t\t\telseif data.startCombat ~= nil then\n\t\t\t\t\t\tgStartCombat = false\n\t\t\t\t\t\tdata.startCombat = nil\n\t\t\t\tend\n\t\t\t\tSallySAM.SkillSettings.Opener.enabled = false\ndata.countdownTime = nil\ndata.countdownDuration = nil\n    self.used = true\nend",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "dequeue if canceled",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return FFXIV_Common_BotRunning and AnyoneCore ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "is bot running",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "if data.CountdownStartEnglish == nil then \ndata.CountdownStartEnglish = \"Battle commencing in (%d+) seconds!\\n\"\ndata.CountdownStartChina = \"距离战斗开始还有(%d+)秒！\\n\"\ndata.CountdownStartFrench = \"Début du combat dans (%d+) secondes!\\n\"\ndata.CountdownStartGerman = \"Noch (%d+) Sekunden bis Kampfbeginn!\\n\"\ndata.CountdownStartJapanese = \"戦闘開始(%d+)秒！\\n\" \ndata.CountdownStartKorean = \"전투 시작 (%d+)초 전!\\n\"\nend\n\nlocal line = eventArgs.line.line\nif line:match(data.CountdownStartEnglish) then return true\nelseif line:match(data.CountdownStartFrench) then return true\nelseif line:match(data.CountdownStartChina) then return true\nelseif line:match(data.CountdownStartGerman) then return true\nelseif line:match(data.CountdownStartJapanese) then return true\nelseif line:match(data.CountdownStartKorean) then return true\nend\nreturn false",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "Battle commencing in 10 seconds!",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "is text countdown",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.countdownTime ~= nil and data.countdownDuration ~= nil and data.countdownDuration * 1000 - TimeSince(data.countdownTime) <= 0 + AnyoneCore.Settings.PrepullHelper[Player.job].badteamdelay",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "time is 0",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.countdownTime ~= nil and data.countdownDuration ~= nil and data.countdownDuration * 1000 - TimeSince(data.countdownTime) <= 0",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "time is < 0",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore.Settings.PrepullHelper[Player.job].enabled == true and Player.job == 34",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "is prepull enabled",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.countdownTime ~= nil and data.countdownDuration ~= nil and data.countdownDuration * 1000 - TimeSince(data.countdownTime) <= 15000",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "time is -15",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return gACRSelectedProfiles[Player.job] == \"SallySAM\"",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "is sallysam",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.countdownTime ~= nil and data.countdownDuration ~= nil and data.countdownDuration * 1000 - TimeSince(data.countdownTime) <= 10000 + AnyoneCore.Settings.PrepullHelper[Player.job].badteamdelay - data.randomDelay",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "time is -10",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.countdownTime ~= nil and data.countdownDuration ~= nil and data.countdownDuration * 1000 - TimeSince(data.countdownTime) <= 700 + AnyoneCore.Settings.PrepullHelper[Player.job].badteamdelay",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "time is -0.7",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.countdownTime ~= nil and data.countdownDuration ~= nil and data.countdownDuration * 1000 - TimeSince(data.countdownTime) <= 5000 - data.randomDelay + AnyoneCore.Settings.PrepullHelper[Player.job].badteamdelay",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "time is -4.9",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Settings.PrepullHelper[Player.job].sprint == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "sprint settings",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 7,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Prepull Helper",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "27f807b0-69a8-9f0b-95b2-1ed9284ddd32",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.countdownCanceled = true\nAnyoneCore.log(\"Countdown was canceled. Sending information back to Prepull Helper.\", 2)\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "English",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.countdownCanceled = true\nAnyoneCore.log(\"Countdown was canceled. Sending information back to Prepull Helper.\", 2)\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "China",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.countdownCanceled = true\nAnyoneCore.log(\"Countdown was canceled. Sending information back to Prepull Helper.\", 2)\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					3,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "French",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.countdownCanceled = true\nAnyoneCore.log(\"Countdown was canceled. Sending information back to Prepull Helper.\", 2)\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					4,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "German",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.countdownCanceled = true\nAnyoneCore.log(\"Countdown was canceled. Sending information back to Prepull Helper.\", 2)\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					5,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Korean",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.countdownCanceled = true\nAnyoneCore.log(\"Countdown was canceled. Sending information back to Prepull Helper.\", 2)\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					6,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Japanese",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "Countdown canceled by",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "English",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "取消了战斗开始倒计时",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "China",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "Le compte à rebours a été interrompu par",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "French",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "hat den Countdown abgebrochen.",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "German",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "님이 초읽기를 취소했습니다",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Korean",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "戦闘開始.",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Japanese",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 7,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Prepull cancel",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "1fd47f54-3a4e-89b4-964a-74ebd9ebdd05",
	},
	
	{
		actions = 
		{
		},
		conditions = 
		{
		},
		enabled = false,
		eventType = 1,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "       -TEA REACTIONS-",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "e83e9eea-a66c-0663-a6d9-c065f07da108",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.limitCutNumber = eventArgs.markerID - 78\ndata.limitCutTime = Now()\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if not table.valid(data.partyLimitCutNumbers) then\n\t\t\t\tdata.partyLimitCutNumbers = {}\nend\nlocal limitCutNumber = eventArgs.markerID - 78\ndata.partyLimitCutNumbers[limitCutNumber] = eventArgs.entityID\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return eventArgs.entityID == Player.id and eventArgs.markerID - 78 >= 1 and eventArgs.markerID - 78 <= 8",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return eventArgs.markerID - 78 >= 1 and eventArgs.markerID - 78 <= 8",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 4,
		execute = "",
		executeType = 1,
		lastUse = 0,
		loop = false,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "limit cut number",
		randomOffset = 0,
		throttleTime = 0,
		time = 200,
		timeRandomRange = false,
		timeRange = true,
		timelineIndex = 39,
		timeout = 5,
		timerEndOffset = 40,
		timerOffset = 0,
		timerStartOffset = -15,
		used = false,
		uuid = "ab2487bd-1d46-5275-b316-b417b2c4d9a8",
	},
	
	{
		actions = 
		{
			
			{
				aType = 3,
				actionID = -1,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
				},
				detectionTargetNumber = 1,
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setDetectionTargetPriority = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = true,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = true,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 3,
				actionID = -1,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = true,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 2,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = 18559,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 8,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = 887,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 3,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Stillness start",
		randomOffset = 0,
		throttleTime = 3000,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 10,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "357d5836-9cfe-7d9e-95b6-74ac03c1cd9c",
	},
	
	{
		actions = 
		{
			
			{
				aType = 3,
				actionID = -1,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = true,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = 9042,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "ContentID",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 2,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = 18559,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 8,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = 887,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 2,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "stillness retarget",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "c404cb9b-0015-504e-8303-901a3454a603",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.hasnisi = true\ndata.mynisi = 2222\ndata.nisipartner = 2224\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "has alpha",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.hasnisi = true\ndata.mynisi = 2223\ndata.nisipartner = 2225\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					3,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "has beta",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.hasnisi = true\ndata.mynisi = 2137\ndata.nisipartner = 2139\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					4,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "has gamma",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.hasnisi = true\ndata.mynisi = 2138\ndata.nisipartner = 2140\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					5,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "has delta",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local Party = TensorCore.getEntityGroupList(\"Party\")\nlocal supports = {19,21,24,28,32,33,37}\n\nfor id,ent in pairs(Party) do\n    if TensorCore.hasBuff(ent, data.nisipartner) and table.contains(supports, ent.job) then\n        Argus.addCircleFilled(\n            ent.pos.x,\n            ent.pos.y,\n            ent.pos.z,\n            0.5,\n            30,\n            GUI:ColorConvertFloat4ToU32(0, 0, 1, 0.2),\n            GUI:ColorConvertFloat4ToU32(0, 0, 1, 1),\n            1.5\n        )\n\n        Argus.addRectFilled(\n            Player.pos.x,\n            Player.pos.y,\n            Player.pos.z,\n            TensorCore.getDistance2d(ent.pos, Player.pos),\n            0.01,\n            TensorCore.getHeadingToTarget(Player.pos, ent.pos),\n            GUI:ColorConvertFloat4ToU32(0, 0, 1, 0.2),\n            GUI:ColorConvertFloat4ToU32(0, 0, 1, 1),\n            1.5\n        )\n\t\t\t\t\t\t\t\tif TensorCore.hasBuff(ent, data.mynisi) then\n\t\t\t\t\t\t\t\t\t\tdata.nisipass = nil\n\t\t\t\t\t\t\t\tend\n    end\nend\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					6,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "draw",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.nonisi = true\ndata.nisipartner = 2222\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					7,
					8,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "need alpha",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.nonisi = true\ndata.nisipartner = 2223\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					7,
					9,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "need beta",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.nonisi = true\ndata.nisipartner = 2137\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					7,
					10,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "need gamma",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.nonisi = true\ndata.nisipartner = 2138\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					7,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "need delta",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local Party = TensorCore.getEntityGroupList(\"Party\")\nlocal supports = {19,21,24,28,32,33,37}\n\nfor id,ent in pairs(Party) do\n    if TensorCore.hasBuff(ent, data.nisipartner) and table.contains(supports, ent.job) then\n        Argus.addCircleFilled(\n            ent.pos.x,\n            ent.pos.y,\n            ent.pos.z,\n            0.5,\n            30,\n            GUI:ColorConvertFloat4ToU32(0, 0, 1, 0.2),\n            GUI:ColorConvertFloat4ToU32(0, 0, 1, 1),\n            1.5\n        )\n\n        Argus.addRectFilled(\n            Player.pos.x,\n            Player.pos.y,\n            Player.pos.z,\n            TensorCore.getDistance2d(ent.pos, Player.pos),\n            0.01,\n            TensorCore.getHeadingToTarget(Player.pos, ent.pos),\n            GUI:ColorConvertFloat4ToU32(0, 0, 1, 0.2),\n            GUI:ColorConvertFloat4ToU32(0, 0, 1, 1),\n            1.5\n        )\n\t\t\t\t\t\t\t\tif TensorCore.hasBuff(Player, data.nisipartner) then\n\t\t\t\t\t\t\t\t\t\tdata.nisipass = nil\n\t\t\t\t\t\t\t\tend\n    end\nend\n\n\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					12,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "draw",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.nisipass == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 2,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "check timeline call",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = 2222,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "has alpha",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = 2223,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "has beta",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = 2137,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "has gamma",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = 2138,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "has delta",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.hasnisi ~= nil and data.nisipartner ~= nil and data.nonisi ~= true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 5,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
					2222,
					2223,
					2137,
					2138,
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "missing all",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = 2224,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "need alpha",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = 2225,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "need beta",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = 2139,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "need gamma",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = 2140,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "need delta",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.nonisi == true and data.nisipartner ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 13,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "draw line to nisi partner",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "1e537d03-bfe1-4bc3-9d15-e50bafccf644",
	},
	
	{
		actions = 
		{
		},
		conditions = 
		{
		},
		enabled = false,
		eventType = 1,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "       -UCOB REACTIONS-",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "0de6d17c-77b4-08ed-b6e9-51450bf9de54",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true return end\nlocal ent = EntityList:Get(eventArgs.entityID)\nif not ent then self.used = true return end\nArgus.addTimedConeFilled(6000, 0, 2.38, 0, 25, math.rad(90), 0, 30, {r = 0.7, g = 0.2, b = 0}, 0.3, 0.3, 0, nil, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1)\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
					4,
					5,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 8,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = 733,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 7,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return eventArgs.markerID == 40\n",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore.Settings.DrawNaelQuotes == true and AnyoneCore ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 8,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = 733,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 4,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "draw earthshaker cones",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "b0ac2aa3-684a-e493-bfb8-129b2afb062a",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t Argus.addTimedDonutFilled(6000, ent.pos.x, ent.pos.y, ent.pos.z, 6, 22, 20, {r = 1, g = 0.4, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\t\t\tArgus.addTimedCircleFilled(3000, ent.pos.x, ent.pos.y, ent.pos.z, 9, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 4500, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Draw Donut > Circle (LD>IC)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\n--for id, ent in pairs(TensorCore.getEntityGroupList(\"Most Clustered Ally\")) do    \n--\t\tif ent then                     \n--\t\t\t\tArgus.addTimedCircleFilled(3500, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 0.6, g = 0.6, b = 0.2}, 0.2, 0.2, 1500, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n--\t\tend \n--end\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t\tArgus.addTimedCircleFilled(5500, ent.pos.x, ent.pos.y, ent.pos.z, 9, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 3500, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					4,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Draw Circle > Circle (TB>IC)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\n--for id, ent in pairs(TensorCore.getEntityGroupList(\"Most Clustered Ally\")) do    \n--\t\tif ent then            \n--\t\t\t\tArgus.addTimedCircleFilled(3500, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 0.6, g = 0.6, b = 0.2}, 0.2, 0.2, 1500, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n--\t\tend \n--end\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t Argus.addTimedDonutFilled(6500, ent.pos.x, ent.pos.y, ent.pos.z, 6, 22, 20, {r = 1, g = 0, b = 0}, 0.2, 0.2, 3500, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					5,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Draw Donut > Circle (TB>LD)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then             \n\t\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 9, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 4000, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					6,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Draw Circles > Circle (RD>IC)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then            \n\t\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t Argus.addTimedDonutFilled(6000, ent.pos.x, ent.pos.y, ent.pos.z, 6, 22, 20, {r = 1, g = 0, b = 0}, 0.2, 0.2, 4000, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					7,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Draw Circles > Donut (RD>LD)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nlocal mt = TensorCore.getEntityByGroup(\"Main Tank\")\n\t\tif mt then\n\t\t\t\tArgus.addTimedCircleFilled(5000, mt.pos.x, mt.pos.y, mt.pos.z, 5, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 10000, mt.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\t\tend\n\n--for id, ent in pairs(TensorCore.getEntityGroupList(\"Most Clustered Ally\")) do    \n--\t\tif ent then                    \n--\t\t\t\tArgus.addTimedCircleFilled(3000, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 14500, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n--\t\tend \n--end\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					8,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Draw Circle > Circle (DD>TB)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then                     \n\t\t\t\tArgus.addTimedCircleFilled(7000, ent.pos.x, ent.pos.y, ent.pos.z, 4, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 7000, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\nlocal mt = TensorCore.getEntityByGroup(\"Main Tank\")\n\t\tif mt then\n\t\t\t\tArgus.addTimedCircleFilled(4000, mt.pos.x, mt.pos.y, mt.pos.z, 5, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 15000, mt.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\t\tend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					9,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Draw Circles > Circle (MS>DD)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t Argus.addTimedDonutFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 6, 22, 20, {r = 1, g = 0, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\n--for id, ent in pairs(TensorCore.getEntityGroupList(\"Most Clustered Ally\")) do    \n--\t\tif ent then                     \n--\t\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 5000, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n--\t\tend \n--end\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					10,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Draw Donut > Circle (LD>TB)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t Argus.addTimedDonutFilled(6750, ent.pos.x, ent.pos.y, ent.pos.z, 6, 22, 20, {r = 1, g = 0, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then            \n\t\t\t\tArgus.addTimedCircleFilled(4000, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 4500, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then                     \n\t\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 4, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 11000, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					12,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "LD > RD > MS (fellruin)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then \n\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then           \n\t\t Argus.addTimedDonutFilled(4000, ent.pos.x, ent.pos.y, ent.pos.z, 6, 22, 20, {r = 1, g = 0, b = 0}, 0.2, 0.2, 5000, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5) \n\t\tend \nend\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent then                     \n\t\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 4, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 11000, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					13,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "RD > LD > MS (fellruin)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t Argus.addTimedDonutFilled(4000, ent.pos.x, ent.pos.y, ent.pos.z, 6, 22, 20, {r = 1, g = 0, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then            \n\t\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 4500, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\n---thermionic beam won't be drawn\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					14,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "LD > RD > TB (adds)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t Argus.addTimedDonutFilled(6000, ent.pos.x, ent.pos.y, ent.pos.z, 6, 22, 20, {r = 1, g = 0.4, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\t\t\tArgus.addTimedCircleFilled(3000, ent.pos.x, ent.pos.y, ent.pos.z, 9, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 4500, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then            \n\t\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 8000, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					15,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "LD > IC > RD (adds)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 9, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\n---wont draw thermionic beam\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then            \n\t\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 8000, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					16,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "IC > TB > RD (adds)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 2612 then\n\t\t\tArgus.addTimedCircleFilled(5000, ent.pos.x, ent.pos.y, ent.pos.z, 9, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\tend\nend\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then            \n\t\t\t\tArgus.addTimedCircleFilled(4000, ent.pos.x, ent.pos.y, ent.pos.z, 3, 30, {r = 1, g = 0, b = 0}, 0.2, 0.2, 5000, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\n---wont draw thermionic beam\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					17,
					11,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "IC > RD > TB (adds)",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 8,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = 733,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 7,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "shine you the iron path!",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Lunar Dynamo > Iron Chariot",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "lead me to iron rule!",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Thermionic > Iron Chariot",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "Take fire,",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Thermionic > Lunar Dynamo",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "the iron path to",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Raven's Dive > Iron Chariot",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "the hallowed moon to call",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Raven's Dive > Lunar Dynamo",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "scorch you the earth",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Dalamud Dive > Thermionic",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "exalt you the red moon",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Meteor Stream > Dalamud Dive",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "take fire and scorch my foes",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Lunar Dynamo > Thermionic",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore.Settings.DrawNaelQuotes == true and AnyoneCore ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "check if draws are enabled",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "a rain of stars to bring",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "LD > RD > MS (fellruin)",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "the moon and stars to bring",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "RD > LD > MS",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "upon burning earth to tread",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "LD > RD > TB (adds)",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "in my descent to wield",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "LD > IC > RD",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "take fire and descend",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "IC > TB > RD",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 5,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "descend with fiery edge",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "IC > RD > TB",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 7,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "draw quotes",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "deba0e58-b1f1-6e52-87a6-8aa7f706dd4c",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then             \n\t\t\t\tArgus.addTimedCircleFilled(1700, ent.pos.x, ent.pos.y, ent.pos.z, 1, 30, {r = 1, g = 1, b = 0.4}, 0.1, 0.1, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\t\tend \nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
					4,
					5,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then             \n\t\t\t\tArgus.addTimedCircleFilled(500, ent.pos.x, ent.pos.y, ent.pos.z, 1, 30, {r = 1, g = 0, b = 0}, 0.4, 0.4, 0, nil, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
					4,
					5,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return eventArgs.spellID == 9898\n",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 7,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore.Settings.DrawNaelQuotes == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 8,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = 733,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 3,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "draw twisters",
		randomOffset = 0,
		throttleTime = 1700,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "1bfb895f-fbd9-b32a-be6e-f72eac414948",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then             \n\t\t\t\tArgus.addTimedCircleFilled(3900, ent.pos.x, ent.pos.y, ent.pos.z, 1, 30, {r = 1, g = 1, b = 0.4}, 0.1, 0.1, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\t\tend \nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
					4,
					5,
					7,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then             \n\t\t\t\tArgus.addTimedCircleFilled(1400, ent.pos.x, ent.pos.y, ent.pos.z, 1, 30, {r = 1, g = 0, b = 0}, 0.4, 0.4, 0, nil, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)    \n\t\tend \nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
					4,
					5,
					7,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then             \n\t\t\t\tArgus.addTimedCircleFilled(4615, ent.pos.x, ent.pos.y, ent.pos.z, 1, 30, {r = 1, g = 1, b = 0.4}, 0.1, 0.1, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\t\tend \nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
					4,
					6,
					7,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "if Argus == nil then self.used = true end\n\nfor id, ent in pairs(TensorCore.getEntityGroupList(\"Party\")) do    \n\t\tif ent and ent.alive == true then             \n\t\t\t\tArgus.addTimedCircleFilled(700, ent.pos.x, ent.pos.y, ent.pos.z, 1, 30, {r = 1, g = 1, b = 0.4}, 0.1, 0.1, 0, ent.id, GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 1.5)\n\t\tend \nend\n\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
					4,
					6,
					7,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return eventArgs.spellID == 9906\n",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 7,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore.Settings.DrawNaelQuotes == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 8,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = 733,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.DontDrawDive == nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.DontDrawDive ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 3,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "draw twisting dive",
		randomOffset = 0,
		throttleTime = 3900,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "60867a30-126f-ae04-9ac5-b79a8b80fe7e",
	},
	
	{
		actions = 
		{
		},
		conditions = 
		{
		},
		enabled = true,
		eventType = 1,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "       -UWU REACTIONS-",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "6c6d424d-7eed-da42-8d99-8b33e2c1756a",
	},
	
	{
		actions = 
		{
			
			{
				aType = 3,
				actionID = -1,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					3,
					4,
				},
				endIfUsed = true,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = true,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = 1185,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "ContentID",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 6,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 1,
				conditions = 
				{
					2,
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Highest HP",
				filterTargetType = "ContentID",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = 1186,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "--credits to qwert for writing this nail swap reaction\nlocal target = EntityList:Get(eventArgs.detectionTargetID)\nlocal current = Player:GetTarget()\nif (target == nil or current == nil) then return false end\nif current.HP.percent < 35 and target.id ~= current.id and target.contentid == 1186 then\n    return true\nelse\n    return false\nend\nreturn false",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "HP & target check",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.nailphase == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Variable",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 8,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = 777,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 1,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "nail swap",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "9c460d4b-f806-ef33-a83c-fc455ca48818",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local duration = 60\nlocal width = 0.1\nlocal length\nlocal t = TensorCore.getEntityByGroup(\"ContentID\", {contentid = 1801, subgroup = \"Nearest\"})\nif t and Argus then\nlength = (24 + t.Distance) \nArgus.addTimedRectFilled(duration, t.pos.x, t.pos.y, t.pos.z, length, width, t.pos.h, {r = 0, g = 0.5, b = 0.5}, 0, 0, 0, t.id, Player.id, true, GUI:ColorConvertFloat4ToU32(0, 0.5, 0.5, 1), 1.5)\nend\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Upheaval",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "Argus.addRectFilled(119.3747253418, 0, 100, 40, 10, -1.57, GUI:ColorConvertFloat4ToU32(MoogleTelegraphs.Settings.fillRGB.enemy.r, MoogleTelegraphs.Settings.fillRGB.enemy.g, MoogleTelegraphs.Settings.fillRGB.enemy.b, MoogleTelegraphs.Settings.alphafill.enemy.large.max), GUI:ColorConvertFloat4ToU32(MoogleTelegraphs.Settings.outlineRGB.enemy.r, MoogleTelegraphs.Settings.outlineRGB.enemy.g, MoogleTelegraphs.Settings.outlineRGB.enemy.b, MoogleTelegraphs.Settings.outlineRGB.enemy.a), MoogleTelegraphs.Settings.outlineThickness.enemy)\nArgus.addRectFilled(100, 0, 80.625274658203, 40, 10, 0, GUI:ColorConvertFloat4ToU32(MoogleTelegraphs.Settings.fillRGB.enemy.r, MoogleTelegraphs.Settings.fillRGB.enemy.g, MoogleTelegraphs.Settings.fillRGB.enemy.b, MoogleTelegraphs.Settings.alphafill.enemy.large.max), GUI:ColorConvertFloat4ToU32(MoogleTelegraphs.Settings.outlineRGB.enemy.r, MoogleTelegraphs.Settings.outlineRGB.enemy.g, MoogleTelegraphs.Settings.outlineRGB.enemy.b, MoogleTelegraphs.Settings.outlineRGB.enemy.a), MoogleTelegraphs.Settings.outlineThickness.enemy)\n\nself.used = true\n",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					3,
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Afterburn Rect",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local t = TensorCore.getEntityByGroup(\"ContentID\", {contentid = 1644, subgroup = \"Nearest\"})\nif t and Argus then\nArgus.addDonutFilled(t.pos.x, t.pos.y, t.pos.z, 7, 20, 50, GUI:ColorConvertFloat4ToU32(MoogleTelegraphs.Settings.fillRGB.enemy.r, MoogleTelegraphs.Settings.fillRGB.enemy.g, MoogleTelegraphs.Settings.fillRGB.enemy.b, MoogleTelegraphs.Settings.alphafill.enemy.large.max), GUI:ColorConvertFloat4ToU32(MoogleTelegraphs.Settings.outlineRGB.enemy.r, MoogleTelegraphs.Settings.outlineRGB.enemy.g, MoogleTelegraphs.Settings.outlineRGB.enemy.b, MoogleTelegraphs.Settings.outlineRGB.enemy.a), MoogleTelegraphs.Settings.outlineThickness.enemy)\n\nend\nself.used = true\n",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					4,
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Wicked Tornado",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "-- just for future reference ent.castinginfo.channelingid == 19473\nfor id, ent in pairs(EntityList(\"\")) do\n\tif ent.contentid == 1644 and ent.castinginfo.casttime >= 2 then\nArgus.addTimedDonutFilled(5156, ent.pos.z, ent.pos.y, ent.pos.z, 7, 20, 50, {r = 1, g = 0, b = 0}, 0.2, 0.2, 0, ent.id, GUI:ColorConvertFloat4ToU32(MoogleTelegraphs.Settings.outlineRGB.enemy.r, MoogleTelegraphs.Settings.outlineRGB.enemy.g, MoogleTelegraphs.Settings.outlineRGB.enemy.b, MoogleTelegraphs.Settings.outlineRGB.enemy.a), MoogleTelegraphs.Settings.outlineThickness.enemy)\ndata.GarudaTornadoPredation = false\n\tend\nend\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					5,
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Wicked Tornado Predation",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "Argus.addCircleFilled(100, 0, 100, 19.5, 50, GUI:ColorConvertFloat4ToU32(0, 0, 0, 0), GUI:ColorConvertFloat4ToU32(1, 0, 0, 1), 2)",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Draw Map Outline",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.UpheavalDraw == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Upheaval Condition",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 8,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = 777,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Self Map ID 777(uwu)",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.IfritCrossDraw == true and MoogleTelegraphs.Settings.enable == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Afterburn Condition",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.GarudaTornado == true and MoogleTelegraphs.Settings.enable == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Wicked Tornado Condition",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.GarudaTornadoPredation == true and MoogleTelegraphs.Settings.enable == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Wicked Tornado Predation Condition",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 12,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "uwu draws",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "f9b7f0b2-5f6e-de17-831b-7b4e3d977877",
	},
	
	{
		actions = 
		{
		},
		conditions = 
		{
		},
		enabled = false,
		eventType = 1,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "      -SAVAGE REACTIONS-",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "882862b8-a571-29dc-8aca-9354a4828ce1",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "local party = TensorCore.getEntityGroupList(\"Party\")\nlocal chainbuffs = {}\n\nfor _, ent in pairs(party) do\n    if TensorCore.hasBuff(ent, 2233) then\n        chainbuffs[#chainbuffs+1] = ent\n    end\nend\n\nfor _, chain in pairs(chainbuffs) do\n    local closest\n    local closestDist = 9999\n    \n    for _, ent in pairs(party) do\n        if ent.id ~= chain.id then\n            local dist = TensorCore.getDistance2d(ent.pos, chain.pos)\n            if dist < closestDist then\n                closest = ent\n                closestDist = dist\n            end\n        end\n    end\n    \n    if closest ~= nil then\n        Argus.addCircleFilled(\n            closest.pos.x,\n            closest.pos.y,\n            closest.pos.z,\n            2,\n            30,\n            GUI:ColorConvertFloat4ToU32(0, 0, 1, 0.2),\n            GUI:ColorConvertFloat4ToU32(0, 0, 1, 1),\n            1.5\n        )\n    end\nend",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					1,
					3,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 8,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = 906,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and Argus ~= nil and AnyoneCore.Settings.DrawChainLightning == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "has argus",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.chainlightning == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 12,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "draw chain lightning",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "dbd3ea42-8bca-0bc0-9c8b-ab7911c9f27b",
	},
	
	{
		actions = 
		{
			
			{
				aType = 1,
				actionID = 7492,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					3,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = true,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "Dash: Gyoten",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Current Target",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 3,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0.019999999552965,
				channelCheckType = 3,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 2,
				conditionLua = "local spellCheck = {\n[19367] = true,\n[19465] = true,\n}\n\nlocal caster = EntityList:Get(eventArgs.entityID)\nreturn spellCheck[eventArgs.spellID] == true and caster and caster.castinginfo.casttime - caster.castinginfo.channeltime <= 0.03\n--- LOWER NUMBER IS BETTER. THIS IS 0.03 SECONDS BEFORE THE CHANNEL GOES OFF.",
				conditionType = 5,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Timer check",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "Event Entity",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore.Settings.NeverDash == false",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Settings check",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
				targetName = "",
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 3,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
					19367,
					19465,
					20219,
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 2,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "local spellCheck = {\n[19367] = true,\n[19465] = true,\n}\n\nreturn spellCheck[eventArgs.spellID] == true",
				conditionType = 5,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Spell check or dequeue",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "Event Entity",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 3,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "instant dash",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 10,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "38f3feec-290b-e667-9ade-d2e7e5f4a336",
	},
	
	{
		actions = 
		{
		},
		conditions = 
		{
		},
		enabled = false,
		eventType = 1,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "        -DUTY HELPER-",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 5,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "4b22bda3-4b68-2128-b2fb-424037626861",
	},
	
	{
		actions = 
		{
			
			{
				aType = 1,
				actionID = 7863,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					6,
					5,
					4,
					7,
				},
				endIfUsed = true,
				gVar = "ACR_RikuSCH_CD",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Event Entity",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 1,
				actionID = 7548,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					7,
					8,
					9,
					3,
				},
				endIfUsed = true,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = true,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 1,
				actionID = 7549,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					1,
					3,
					5,
				},
				endIfUsed = false,
				gVar = "",
				gVarValue = 1,
				ignoreWeaveRules = true,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Event Entity",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.MDPSMitigation[eventArgs.spellID] == true",
				conditionType = 2,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 2,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "mitigation table",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return (FFXIV_Common_BotRunning or AnyoneCore.Settings.DutyHelper.requirebotenabled == false) and AnyoneCore ~= nil and AnyoneCore.Settings.DutyHelper[Player.job].mitigation == true and AnyoneCore.Settings.DutyHelper.enabled == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "check mitigation settings",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 7,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "combat check",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "local target = EntityList:Get(eventArgs.detectionTargetID)\nif target ~= nil and target.castinginfo ~= nil then\n\t\tif target.castinginfo.castinginterruptible == true then\n\t\t\treturn true\n\t\tend\nend\nreturn false",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "is interruptible?",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 3,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 2,
				conditionLua = "",
				conditionType = 4,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 3,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "3y",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "Event Entity",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return (FFXIV_Common_BotRunning or AnyoneCore.Settings.DutyHelper.requirebotenabled == false) and AnyoneCore ~= nil and AnyoneCore.Settings.DutyHelper[Player.job].interrupt == true and AnyoneCore.Settings.DutyHelper.enabled == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "check interrupt settings",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 3,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 5,
				channelCheckType = 3,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 2,
				conditionLua = "",
				conditionType = 5,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 2,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "check timer",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "Event Entity",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return (FFXIV_Common_BotRunning or AnyoneCore.Settings.DutyHelper.requirebotenabled == false) and AnyoneCore ~= nil and AnyoneCore.Settings.DutyHelper[Player.job].knockback == true and AnyoneCore.Settings.DutyHelper.enabled == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "check kb settings",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.Knockback[eventArgs.spellID] == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "kb table check",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 3,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Multitool",
		randomOffset = 0,
		throttleTime = 0,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 10,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "c5c8a7ad-be47-6325-b7e6-dcecd90f8a65",
	},
	
	{
		actions = 
		{
			
			{
				aType = 3,
				actionID = -1,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					1,
					5,
					3,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = true,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Enemy",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 3,
				actionID = -1,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					4,
					2,
					3,
					7,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = true,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 3,
				actionID = -1,
				actionLua = "",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					6,
					3,
					7,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = true,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = true,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "if not Player:GetTarget() then return true end\nreturn false",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check target",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and (FFXIV_Common_BotRunning or AnyoneCore.Settings.DutyHelper.requirebotenabled == false) and AnyoneCore.Settings.DutyHelper[Player.job].targeting == true and AnyoneCore.Settings.DutyHelper.enabled == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check settings",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 7,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Combat check",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "local mytarget = Player:GetTarget()\nlocal cinfo = Player.castinginfo \nreturn mytarget ~= nil and cinfo ~= nil and cinfo.channeltargetid ~= nil and (mytarget.id ~= cinfo.channeltargetid) and (cinfo.casttime - cinfo.channeltime >= 0.500) and not cinfo.channelingid == 16511 and not cinfo.channelingid == 7425 and not cinfo.channelingid == 7488",
				conditionType = 5,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check casting info",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.stopAutoTarget == nil and data.stopAutoTargetDupe == nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check global calls",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.stopCast ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check global calls 2",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "local target = Player:GetTarget()\nreturn target and target.contentid < 30000",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check for inanimate objects",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 1,
		execute = "",
		executeType = 1,
		lastUse = 0,
		loop = true,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Always find a target",
		randomOffset = 0,
		throttleTime = 0,
		time = 128.9,
		timeRandomRange = false,
		timeRange = true,
		timelineIndex = 20,
		timeout = 5,
		timerEndOffset = 8,
		timerOffset = 1.375,
		timerStartOffset = -8,
		used = false,
		uuid = "eff01aa7-41f9-659b-baff-d3827bc25dba",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.stopCast = true\ndata.stopAutoTargetDupe = true\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					2,
					4,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.stopCast = nil\ndata.stopAutoTargetDupe = nil\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					3,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 3,
				buffDuration = 2,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 1,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 2,
				conditionLua = "local ClearTargetTable = {\n--stop cast and clear target\n[639] = true,\n[960] = true,\n[1049] = true,\n[1072] = true,\n[1132] = true,\n[1133] = true,\n[1269] = true,\n[1270] = true,\n[1384] = true,\n[1599] = true,\n}\n\nreturn AnyoneCore.ClearTarget[eventArgs.buffID] == true and eventArgs.buffDuration <= 2",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 2,
				eventArgType = 2,
				eventBuffDuration = -2,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = 0,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "-2s",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "Event Entity",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return (FFXIV_Common_BotRunning or AnyoneCore.Settings.DutyHelper.requirebotenabled == false) and AnyoneCore ~= nil and AnyoneCore.Settings.DutyHelper[Player.job].targeting == true and AnyoneCore.Settings.DutyHelper.enabled == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check Settings",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.stopCast ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check global call",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.ClearTarget[eventArgs.buffID] == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check table",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = false,
		eventType = 8,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Clear target",
		randomOffset = 0,
		throttleTime = 4000,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 10,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "6655a48f-d3b3-ee00-b99f-2cce0d19f440",
	},
	
	{
		actions = 
		{
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.stopAutoTarget = true\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					1,
					3,
					5,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
			
			{
				aType = 4,
				actionID = -1,
				actionLua = "data.stopAutoTarget = nil\nself.used = true",
				allowInterrupt = false,
				atomicPriority = false,
				castAtMouse = false,
				castPosX = 0,
				castPosY = 0,
				castPosZ = 0,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				conditions = 
				{
					2,
					3,
					4,
				},
				endIfUsed = false,
				gVar = "",
				gVarIndex = 1,
				gVarValue = 1,
				ignoreWeaveRules = false,
				isAreaTarget = false,
				luaNeedsWeaveWindow = false,
				luaReturnsAction = false,
				name = "",
				potType = 1,
				setTarget = false,
				showPositionPreview = false,
				stopCasting = false,
				stopMoving = false,
				targetContentID = -1,
				targetName = "",
				targetSubType = "Nearest",
				targetType = "Self",
				untarget = false,
				useForWeaving = false,
				usePot = false,
				used = false,
				variableIsHover = false,
				variableTogglesType = 1,
			},
		},
		conditions = 
		{
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 3,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 1,
				channelCheckType = 3,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 2,
				conditionLua = "",
				conditionType = 5,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = false,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check timer",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "Event Entity",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return data.stopAutoTarget ~= nil",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check global call",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return (FFXIV_Common_BotRunning or AnyoneCore.Settings.DutyHelper.requirebotenabled == false) and AnyoneCore ~= nil and AnyoneCore.Settings.DutyHelper[Player.job].targeting == true and AnyoneCore.Settings.DutyHelper.enabled == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check settings",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 2,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "",
				conditionType = 7,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Combat check",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = 1,
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
			
			{
				actionCDValue = 0,
				actionID = -1,
				buffCheckType = 1,
				buffDuration = 0,
				buffID = -1,
				buffIDList = 
				{
				},
				category = 4,
				channelCheckSpellID = -1,
				channelCheckSpellIDList = 
				{
				},
				channelCheckTimeRemain = 0,
				channelCheckType = 1,
				clusterMinPercent = false,
				clusterMinTarget = 1,
				clusterRadius = 8,
				clusterRange = 30,
				comparator = 1,
				conditionLua = "return AnyoneCore ~= nil and AnyoneCore.StopCasting[eventArgs.spellID] == true",
				conditionType = 1,
				conditions = 
				{
				},
				contentid = -1,
				dequeueIfLuaFalse = true,
				enmityValue = 0,
				eventArgOptionType = 1,
				eventArgType = 1,
				eventBuffDuration = 0,
				eventBuffID = -1,
				eventChatLine = "",
				eventEntityContentID = -1,
				eventEntityID = -1,
				eventEntityName = "",
				eventMarkerID = -1,
				eventOwnerContentID = -1,
				eventOwnerID = -1,
				eventOwnerName = "",
				eventSpellID = -1,
				eventSpellName = -1,
				eventTargetContentID = -1,
				eventTargetID = -1,
				eventTargetName = "",
				filterTargetSubtype = "Nearest",
				filterTargetType = "Self",
				gaugeIndex = 1,
				gaugeValue = 0,
				hpType = 1,
				hpValue = 0,
				inCombatType = 1,
				inRangeValue = 0,
				lastSkillID = -1,
				localmapid = -1,
				matchAnyBuff = false,
				minTargetPercent = false,
				mpType = 1,
				mpValue = 0,
				name = "Check table",
				partyHpType = 1,
				partyHpValue = 0,
				partyMpType = 1,
				partyMpValue = 0,
				partyTargetContentID = -1,
				partyTargetName = "",
				partyTargetNumber = 1,
				partyTargetSubType = "Nearest",
				partyTargetType = "All",
				rangeCheckSourceSubType = "Nearest",
				rangeCheckSourceType = "Self",
				rangeSourceContentID = -1,
				rangeSourceName = "",
				setEventTargetSubtype = 1,
				setFirstMatch = false,
			},
		},
		enabled = true,
		eventType = 3,
		execute = "",
		executeType = 1,
		lastUse = 0,
		luaNeedsWeaveWindow = false,
		luaReturnsAction = false,
		name = "Stop auto target",
		randomOffset = 0,
		throttleTime = 6000,
		time = 0,
		timeRandomRange = false,
		timeRange = false,
		timelineIndex = 0,
		timeout = 10,
		timerEndOffset = 0,
		timerOffset = 0,
		timerStartOffset = 0,
		used = false,
		uuid = "b94ff36e-2c29-9224-a2b1-e2702cd851fa",
	},
}



return tbl